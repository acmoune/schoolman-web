{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { gql } from 'apollo-boost';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Link from 'next/link';\nimport DepList from '../components/catalog/DepList';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Hidden, Paper } from '@material-ui/core';\nimport ProgramSummaryContent from '../components/catalog/ProgramSummaryContent';\nimport TrainingSummary from '../components/catalog/TrainingSummary';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nconst GET_DEPARTMENTS_QUERY = gql`\n  query getDepartments {\n    departments {\n      id \n      title\n      programs {\n        id \n        title \n        description \n        logo \n        link \n        trainings { id title description banner link }\n      }\n    }\n  }\n`;\n\nfunction ProgramPage({\n  programId,\n  departments\n}) {\n  const filtered = departments.flatMap(d => d.programs).filter(p => p.id == programId);\n  const program = filtered.length > 0 ? filtered[0] : null;\n  if (!program) return __jsx(\"div\", null, \"Program not found\");\n  return __jsx(MainLayout, {\n    title: `${program.title} - Program -  IMIT`\n  }, __jsx(Container, null, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    sm: 3\n  }, __jsx(DepList, {\n    deps: departments,\n    selectedProgramId: programId\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 9\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Paper, {\n    style: {\n      padding: 15\n    }\n  }, __jsx(ProgramSummaryContent, {\n    program: program,\n    displayLink: true\n  })), __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: 'center',\n      margin: '15px 0px'\n    }\n  }, \"Available trainings\"), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, program.trainings.map(t => __jsx(Grid, {\n    item: true,\n    sm: 6\n  }, __jsx(Link, {\n    href: {\n      pathname: '/training',\n      query: {\n        trainingId: t.id\n      }\n    },\n    passHref: true\n  }, __jsx(TrainingSummary, {\n    training: t\n  }))))))))));\n}\n\nProgramPage.getInitialProps = async ({\n  query,\n  apolloClient,\n  token\n}) => {\n  const {\n    data: {\n      departments\n    }\n  } = await apolloClient.query({\n    query: GET_DEPARTMENTS_QUERY,\n    context: {\n      headers: {\n        'schoolman_token': token\n      }\n    }\n  });\n  return {\n    departments,\n    programId: query.programId,\n    authRequired: false\n  };\n};\n\nexport default withApollo(withAuth(ProgramPage));","map":{"version":3,"sources":["/data/apps/school-manager-client/pages/program.tsx"],"names":["React","gql","Container","MainLayout","Link","DepList","Typography","Grid","Hidden","Paper","ProgramSummaryContent","TrainingSummary","withApollo","withAuth","GET_DEPARTMENTS_QUERY","ProgramPage","programId","departments","filtered","flatMap","d","programs","filter","p","id","program","length","title","marginTop","padding","textAlign","margin","trainings","map","t","pathname","query","trainingId","getInitialProps","apolloClient","token","data","context","headers","authRequired"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { gql } from 'apollo-boost'\nimport Container from '../components/Container'\nimport MainLayout from '../layouts/MainLayout'\nimport Link from 'next/link'\nimport DepList from '../components/catalog/DepList'\nimport { Typography } from '@material-ui/core'\nimport {\n  Grid,\n  Hidden,\n  Paper\n} from '@material-ui/core'\nimport ProgramSummaryContent from '../components/catalog/ProgramSummaryContent'\nimport TrainingSummary from '../components/catalog/TrainingSummary'\nimport IDepartment from '../server/src/models/catalog/Department'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\n\nconst GET_DEPARTMENTS_QUERY = gql`\n  query getDepartments {\n    departments {\n      id \n      title\n      programs {\n        id \n        title \n        description \n        logo \n        link \n        trainings { id title description banner link }\n      }\n    }\n  }\n`\n\nfunction ProgramPage({ programId, departments }: { programId: number, departments: IDepartment[] }) {\n  const filtered = departments.flatMap(d => d.programs).filter(p => p.id == programId)\n  const program = filtered.length > 0 ? filtered[0] : null\n\n  if (!program) return <div>Program not found</div>\n\n  return (\n    <MainLayout title={`${program.title} - Program -  IMIT`}>\n      <Container>\n        <Grid container spacing={1}>\n          <Hidden smDown>\n            <Grid item sm={3}>\n              <DepList deps={departments} selectedProgramId={programId} />\n            </Grid>\n          </Hidden>\n          \n          <Grid item xs={12} sm={9}>\n            <div style={{ marginTop: 15 }}>\n              <Paper style={{ padding: 15 }}>\n                <ProgramSummaryContent program={program} displayLink />\n              </Paper>\n\n              <Typography variant=\"h5\" style={{textAlign: 'center', margin: '15px 0px'}}>Available trainings</Typography>\n\n              <Grid container spacing={2}>\n                {program.trainings.map((t: any) =>\n                  <Grid item sm={6}>\n                    <Link href={{ pathname: '/training', query: { trainingId: t.id } }} passHref>\n                      <TrainingSummary training={t} />\n                    </Link>\n                  </Grid>\n                )}\n              </Grid>\n            </div>\n          </Grid>\n        </Grid>\n      </Container>\n    </MainLayout>\n  )\n}\n\nProgramPage.getInitialProps = async ({ query, apolloClient, token }: any) => {\n  const { data: { departments }} = await apolloClient.query({\n    query: GET_DEPARTMENTS_QUERY,\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ departments, programId: query.programId, authRequired: false })\n}\n\nexport default withApollo(withAuth(ProgramPage))\n"]},"metadata":{},"sourceType":"module"}