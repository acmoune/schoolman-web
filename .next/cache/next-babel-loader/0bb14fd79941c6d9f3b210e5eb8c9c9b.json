{"ast":null,"code":"var _jsxFileName = \"/data/apps/opensource/SchoolMan/web-client/components/ApplierForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Alert from '../components/Alert';\nimport validator from 'validator';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Button } from '@material-ui/core';\n\nfunction ApplierForm({\n  data,\n  onSubmit\n}) {\n  const classes = makeStyles(theme => createStyles({\n    fieldGroup: {\n      marginBottom: 25,\n      padding: 10\n    },\n    groupTitle: {\n      fontSize: '12pt',\n      color: '#808080',\n      paddingBottom: 5,\n      borderBottom: '1px solid #DFDFDF',\n      fontWeight: 'bold',\n      marginBottom: 15\n    },\n    field: {\n      marginBottom: 30\n    }\n  }))();\n  const {\n    0: inputErrors,\n    1: setInputErrors\n  } = useState({\n    nameErrors: [],\n    emailErrors: []\n  });\n  const {\n    0: alertOptions,\n    1: setAlertOptions\n  } = useState({\n    open: false,\n    level: 'info',\n    message: ''\n  }); // Fields state variables\n\n  const {\n    0: name,\n    1: setName\n  } = useState(data.name);\n  const {\n    0: email,\n    1: setEmail\n  } = useState(data.email);\n\n  const validateData = () => {\n    const nameErrors = [];\n    const emailErrors = [];\n    if (validator.isEmpty(name)) nameErrors.push('Your name is required');\n    if (validator.isEmpty(email)) emailErrors.push('Your email is required');\n    const isValid = nameErrors.length == 0 && emailErrors.length == 0;\n    const errors = {\n      nameErrors,\n      emailErrors\n    };\n    return {\n      isValid,\n      errors\n    };\n  };\n\n  const submit = cb => {\n    const {\n      isValid,\n      errors\n    } = validateData();\n    setInputErrors(errors);\n    if (!isValid) return cb('Please enter valid inputs');\n    return cb('', {\n      name,\n      email\n    });\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.fieldGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.groupTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Provide your name and email\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(TextField, {\n    className: classes.field,\n    id: \"name\",\n    name: \"name\",\n    label: \"Full Name\",\n    fullWidth: true,\n    value: name,\n    onChange: e => setName(e.target.value),\n    error: inputErrors.nameErrors.length > 0,\n    helperText: inputErrors.nameErrors.join(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"email\",\n    name: \"email\",\n    label: \"Email\",\n    fullWidth: true,\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    error: inputErrors.emailErrors.length > 0,\n    helperText: inputErrors.emailErrors.join(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => submit((errMessage, data) => {\n      if (errMessage) return setAlertOptions({\n        open: true,\n        level: 'error',\n        message: errMessage\n      });\n      if (data) return onSubmit(data);\n      return;\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Save and Fill application form\")), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: () => setAlertOptions({\n      open: false,\n      level: alertOptions.level,\n      message: alertOptions.message\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }));\n}\n\nexport default ApplierForm;","map":{"version":3,"sources":["/data/apps/opensource/SchoolMan/web-client/components/ApplierForm.tsx"],"names":["React","useState","Alert","validator","makeStyles","createStyles","Paper","TextField","Button","ApplierForm","data","onSubmit","classes","theme","fieldGroup","marginBottom","padding","groupTitle","fontSize","color","paddingBottom","borderBottom","fontWeight","field","inputErrors","setInputErrors","nameErrors","emailErrors","alertOptions","setAlertOptions","open","level","message","name","setName","email","setEmail","validateData","isEmpty","push","isValid","length","errors","submit","cb","textAlign","e","target","value","join","errMessage"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Alert, { AlertOptions } from '../components/Alert'\nimport validator from 'validator'\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\nimport { Paper, TextField, Button } from '@material-ui/core'\n\ntype InputErrors = {\n  nameErrors: string[],\n  emailErrors: string[]\n}\n\ntype Props = {\n  data: { name: string, email: string },\n  onSubmit: (data: { name: string, email: string }) => void\n}\n\nfunction ApplierForm({ data, onSubmit }: Props) {\n  const classes = makeStyles((theme: Theme) => createStyles({\n    fieldGroup: {\n      marginBottom: 25,\n      padding: 10\n    },\n  \n    groupTitle: {\n      fontSize: '12pt',\n      color: '#808080',\n      paddingBottom: 5,\n      borderBottom: '1px solid #DFDFDF',\n      fontWeight: 'bold',\n      marginBottom: 15\n    },\n  \n    field: {\n      marginBottom: 30\n    }\n  }))()\n\n  const [inputErrors, setInputErrors] = useState<InputErrors>({ nameErrors: [], emailErrors: [] })\n  const [alertOptions, setAlertOptions] = useState<AlertOptions>({ open: false, level: 'info', message: '' })\n\n  // Fields state variables\n  const [name, setName] = useState<string>(data.name)\n  const [email, setEmail] = useState<string>(data.email)\n  \n  const validateData = (): { isValid: boolean, errors: InputErrors } => {\n    const nameErrors: string[] = []\n    const emailErrors: string[] = []\n\n    if (validator.isEmpty(name)) nameErrors.push('Your name is required')\n    if (validator.isEmpty(email)) emailErrors.push('Your email is required')\n\n    const isValid = nameErrors.length == 0 && emailErrors.length == 0 \n    const errors = { nameErrors, emailErrors }\n    return ({ isValid, errors })\n  }\n\n  const submit = (cb: (errMessage: string, data?: any) => any) => {\n    const { isValid, errors } = validateData()\n    setInputErrors(errors)\n\n    if (!isValid) return cb('Please enter valid inputs')\n    return cb('', { name, email })\n  }\n\n  return (\n    <div style={{ textAlign: 'left' }}>\n      <Paper className={classes.fieldGroup}>\n        <div className={classes.groupTitle}>Provide your name and email</div>\n        <div>\n          <TextField\n            className={classes.field}\n            id=\"name\"\n            name=\"name\"\n            label=\"Full Name\"\n            fullWidth\n            value={name}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\n            error={inputErrors.nameErrors.length > 0}\n            helperText={inputErrors.nameErrors.join(', ')}\n          />\n\n          <TextField\n            className={classes.field}\n            id=\"email\"\n            name=\"email\"\n            label=\"Email\"\n            fullWidth\n            value={email}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n            error={inputErrors.emailErrors.length > 0}\n            helperText={inputErrors.emailErrors.join(', ')}\n          />\n        </div>\n      </Paper>\n    \n      <div style={{ textAlign: 'center' }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => submit((errMessage, data) => {\n            if (errMessage) return setAlertOptions({ open: true, level: 'error', message: errMessage })\n            if (data) return onSubmit(data)\n            return;\n          })}\n        >\n          Save and Fill application form\n        </Button>\n      </div>\n\n      <Alert \n        level={alertOptions.level}\n        message={alertOptions.message}\n        open={alertOptions.open}\n        onClose={() => setAlertOptions({ open: false, level: alertOptions.level, message: alertOptions.message })}\n      />\n    </div>\n  )\n}\n\nexport default ApplierForm\n"]},"metadata":{},"sourceType":"module"}