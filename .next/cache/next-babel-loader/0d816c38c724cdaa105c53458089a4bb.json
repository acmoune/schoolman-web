{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { AuthProvider } from '../components/AuthContext';\nimport jwtDecode from 'jwt-decode';\nimport { gql } from 'apollo-boost';\nimport axios from 'axios';\nimport { getCookieFromBrowser, getCookieFromServer } from '../lib/cookie';\nimport { authCookieName, apiBaseUrl } from '../app.config';\nimport Router from 'next/router';\nconst GET_PROFILE_QUERY = gql`\n  query getProfile($email: String!) {\n    account(email: $email) {\n      id\n      email\n      fullName\n      profile {\n        id birthDate birthPlace residence phoneNumber nationality\n        nicNumber nicDateOfIssue nicPlaceOfIssue\n        highestAcademicQualification yearOfIssue englishGradeInGCEOL mathematicsGradeInGCEOL\n        professionalQualification employmentStatus jobTitle yearsOfExperience employerName employerAddress\n        otherDetails\n      }\n    }\n  }\n`;\nexport default function withAuth(PageComponent) {\n  const getToken = req => true ? getCookieFromServer(authCookieName, req) : getCookieFromBrowser(authCookieName);\n\n  const WithAuth = (_ref) => {\n    let {\n      currentUser\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"currentUser\"]);\n\n    return __jsx(AuthProvider, {\n      currentUser: currentUser\n    }, __jsx(PageComponent, pageProps));\n  };\n\n  WithAuth.getInitialProps = async ctx => {\n    const token = getToken(ctx.req);\n    let currentUser = undefined;\n\n    if (token) {\n      let isValid = false;\n\n      try {\n        await axios.post(`${apiBaseUrl}/validateToken`, {\n          token\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        isValid = true;\n      } catch (ex) {}\n\n      if (isValid) {\n        const {\n          data: {\n            account\n          }\n        } = await ctx.apolloClient.query({\n          query: GET_PROFILE_QUERY,\n          variables: {\n            email: jwtDecode(token).ema\n          },\n          context: {\n            headers: {\n              'schoolman_token': token\n            }\n          }\n        });\n        currentUser = account;\n      }\n    } // add token and currentUser to context, so they can be used in PageComponent.getInitialProps\n\n\n    ctx.token = token;\n    ctx.currentUser = currentUser;\n    let pageProps = {};\n    if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx);\n    const {\n      authRequired\n    } = pageProps;\n\n    if (authRequired && !currentUser) {\n      if (true) ctx.res.redirect('/signIn');else Router.push('/signIn');\n    }\n\n    return _objectSpread({\n      currentUser\n    }, pageProps);\n  };\n\n  return WithAuth;\n}","map":null,"metadata":{},"sourceType":"module"}