{"ast":null,"code":"var _jsxFileName = \"/data/apps/school-manager-client/components/ApplierForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Alert from '../components/Alert';\nimport validator from 'validator';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Button } from '@material-ui/core';\n\nfunction ApplierForm(_ref) {\n  var data = _ref.data,\n      onSubmit = _ref.onSubmit;\n  var classes = makeStyles(function (theme) {\n    return createStyles({\n      fieldGroup: {\n        marginBottom: 25,\n        padding: 10\n      },\n      groupTitle: {\n        fontSize: '12pt',\n        color: '#808080',\n        paddingBottom: 5,\n        borderBottom: '1px solid #DFDFDF',\n        fontWeight: 'bold',\n        marginBottom: 15\n      },\n      field: {\n        marginBottom: 30\n      }\n    });\n  })();\n\n  var _useState = useState({\n    nameErrors: [],\n    emailErrors: []\n  }),\n      inputErrors = _useState[0],\n      setInputErrors = _useState[1];\n\n  var _useState2 = useState({\n    open: false,\n    level: 'info',\n    message: ''\n  }),\n      alertOptions = _useState2[0],\n      setAlertOptions = _useState2[1]; // Fields state variables\n\n\n  var _useState3 = useState(data.name),\n      name = _useState3[0],\n      setName = _useState3[1];\n\n  var _useState4 = useState(data.email),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var validateData = function validateData() {\n    var nameErrors = [];\n    var emailErrors = [];\n    if (validator.isEmpty(name)) nameErrors.push('Your name is required');\n    if (validator.isEmpty(email)) emailErrors.push('Your email is required');\n    var isValid = nameErrors.length == 0 && emailErrors.length == 0;\n    var errors = {\n      nameErrors: nameErrors,\n      emailErrors: emailErrors\n    };\n    return {\n      isValid: isValid,\n      errors: errors\n    };\n  };\n\n  var submit = function submit(cb) {\n    var _validateData = validateData(),\n        isValid = _validateData.isValid,\n        errors = _validateData.errors;\n\n    setInputErrors(errors);\n    if (!isValid) return cb('Please enter valid inputs');\n    return cb('', {\n      name: name,\n      email: email\n    });\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.fieldGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.groupTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Provide your name and email\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(TextField, {\n    className: classes.field,\n    id: \"name\",\n    name: \"name\",\n    label: \"Full Name\",\n    fullWidth: true,\n    value: name,\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    },\n    error: inputErrors.nameErrors.length > 0,\n    helperText: inputErrors.nameErrors.join(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"email\",\n    name: \"email\",\n    label: \"Email\",\n    fullWidth: true,\n    value: email,\n    onChange: function onChange(e) {\n      return setEmail(e.target.value);\n    },\n    error: inputErrors.emailErrors.length > 0,\n    helperText: inputErrors.emailErrors.join(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: function onClick() {\n      return submit(function (errMessage, data) {\n        if (errMessage) return setAlertOptions({\n          open: true,\n          level: 'error',\n          message: errMessage\n        });\n        if (data) return onSubmit(data);\n        return;\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Save and Fill application form\")), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: function onClose() {\n      return setAlertOptions({\n        open: false,\n        level: alertOptions.level,\n        message: alertOptions.message\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }));\n}\n\nexport default ApplierForm;","map":{"version":3,"sources":["/data/apps/school-manager-client/components/ApplierForm.tsx"],"names":["React","useState","Alert","validator","makeStyles","createStyles","Paper","TextField","Button","ApplierForm","data","onSubmit","classes","theme","fieldGroup","marginBottom","padding","groupTitle","fontSize","color","paddingBottom","borderBottom","fontWeight","field","nameErrors","emailErrors","inputErrors","setInputErrors","open","level","message","alertOptions","setAlertOptions","name","setName","email","setEmail","validateData","isEmpty","push","isValid","length","errors","submit","cb","textAlign","e","target","value","join","errMessage"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Alert, { AlertOptions } from '../components/Alert'\nimport validator from 'validator'\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\nimport { Paper, TextField, Button } from '@material-ui/core'\n\ntype InputErrors = {\n  nameErrors: string[],\n  emailErrors: string[]\n}\n\ntype Props = {\n  data: { name: string, email: string },\n  onSubmit: (data: { name: string, email: string }) => void\n}\n\nfunction ApplierForm({ data, onSubmit }: Props) {\n  const classes = makeStyles((theme: Theme) => createStyles({\n    fieldGroup: {\n      marginBottom: 25,\n      padding: 10\n    },\n  \n    groupTitle: {\n      fontSize: '12pt',\n      color: '#808080',\n      paddingBottom: 5,\n      borderBottom: '1px solid #DFDFDF',\n      fontWeight: 'bold',\n      marginBottom: 15\n    },\n  \n    field: {\n      marginBottom: 30\n    }\n  }))()\n\n  const [inputErrors, setInputErrors] = useState<InputErrors>({ nameErrors: [], emailErrors: [] })\n  const [alertOptions, setAlertOptions] = useState<AlertOptions>({ open: false, level: 'info', message: '' })\n\n  // Fields state variables\n  const [name, setName] = useState<string>(data.name)\n  const [email, setEmail] = useState<string>(data.email)\n  \n  const validateData = (): { isValid: boolean, errors: InputErrors } => {\n    const nameErrors: string[] = []\n    const emailErrors: string[] = []\n\n    if (validator.isEmpty(name)) nameErrors.push('Your name is required')\n    if (validator.isEmpty(email)) emailErrors.push('Your email is required')\n\n    const isValid = nameErrors.length == 0 && emailErrors.length == 0 \n    const errors = { nameErrors, emailErrors }\n    return ({ isValid, errors })\n  }\n\n  const submit = (cb: (errMessage: string, data?: any) => any) => {\n    const { isValid, errors } = validateData()\n    setInputErrors(errors)\n\n    if (!isValid) return cb('Please enter valid inputs')\n    return cb('', { name, email })\n  }\n\n  return (\n    <div style={{ textAlign: 'left' }}>\n      <Paper className={classes.fieldGroup}>\n        <div className={classes.groupTitle}>Provide your name and email</div>\n        <div>\n          <TextField\n            className={classes.field}\n            id=\"name\"\n            name=\"name\"\n            label=\"Full Name\"\n            fullWidth\n            value={name}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\n            error={inputErrors.nameErrors.length > 0}\n            helperText={inputErrors.nameErrors.join(', ')}\n          />\n\n          <TextField\n            className={classes.field}\n            id=\"email\"\n            name=\"email\"\n            label=\"Email\"\n            fullWidth\n            value={email}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n            error={inputErrors.emailErrors.length > 0}\n            helperText={inputErrors.emailErrors.join(', ')}\n          />\n        </div>\n      </Paper>\n    \n      <div style={{ textAlign: 'center' }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => submit((errMessage, data) => {\n            if (errMessage) return setAlertOptions({ open: true, level: 'error', message: errMessage })\n            if (data) return onSubmit(data)\n            return;\n          })}\n        >\n          Save and Fill application form\n        </Button>\n      </div>\n\n      <Alert \n        level={alertOptions.level}\n        message={alertOptions.message}\n        open={alertOptions.open}\n        onClose={() => setAlertOptions({ open: false, level: alertOptions.level, message: alertOptions.message })}\n      />\n    </div>\n  )\n}\n\nexport default ApplierForm\n"]},"metadata":{},"sourceType":"module"}