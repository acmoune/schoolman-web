{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/data/apps/school-manager-client/lib/with-apollo.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { baseUrl, authCookieName } from '../app.config';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { getCookieFromBrowser } from '../lib/cookie';\nimport { typeDefs, resolvers } from '../lib/graphql/clientSchema';\nlet apolloClient = null;\n\nfunction createApolloClient(initialState = {}) {\n  const httpLink = new HttpLink({\n    uri: `${baseUrl}/graphql`,\n    credentials: 'same-origin',\n    fetch\n  });\n  const authLink = setContext((_, prevCtxt) => {\n    let headers = prevCtxt.headers || {};\n\n    if (!headers['schoolman_token']) {\n      const token = getCookieFromBrowser(authCookieName);\n      headers = _objectSpread({}, headers, {\n        'schoolman_token': token || ''\n      });\n    }\n\n    return {\n      headers\n    };\n  });\n  const cache = new InMemoryCache().restore(initialState);\n  const client = new ApolloClient({\n    ssrMode: true,\n    cache,\n    link: authLink.concat(httpLink),\n    typeDefs,\n    resolvers\n  });\n  const data = {\n    // initial LocalState\n    applier: {\n      __typename: 'Applier',\n      name: '',\n      email: ''\n    },\n    applicationProfile: {\n      __typename: 'ProfileData',\n      birthDate: null,\n      birthPlace: '',\n      residence: '',\n      phoneNumber: '',\n      nationality: '',\n      nicNumber: '',\n      nicDateOfIssue: null,\n      nicPlaceOfIssue: '',\n      highestAcademicQualification: '',\n      yearOfIssue: new Date().getFullYear(),\n      englishGradeInGCEOL: '',\n      mathematicsGradeInGCEOL: '',\n      professionalQualification: '',\n      employmentStatus: 'JobSeeker',\n      jobTitle: '',\n      yearsOfExperience: 0,\n      employerName: '',\n      employerAddress: '',\n      otherDetails: null\n    }\n  };\n  cache.writeData({\n    data\n  });\n  client.onResetStore(() => cache.writeData({\n    data\n  }));\n  return client;\n}\n\nfunction initApolloClient(initialState) {\n  if (true) return createApolloClient(initialState);\n  if (!apolloClient) apolloClient = createApolloClient(initialState);\n  return apolloClient;\n}\n\nexport default function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })));\n  };\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = initApolloClient();\n      ctx.apolloClient = apolloClient;\n      let pageProps = {};\n      if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx); // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished. No point in continuing to render\n        if (ctx.res && ctx.res.finished) return pageProps;\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            const {\n              AppTree\n            } = ctx;\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116\n              },\n              __self: this\n            }));\n          } catch (error) {\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}","map":{"version":3,"sources":["/data/apps/school-manager-client/lib/with-apollo.jsx"],"names":["React","ApolloClient","InMemoryCache","HttpLink","setContext","ApolloProvider","baseUrl","authCookieName","Head","fetch","getCookieFromBrowser","typeDefs","resolvers","apolloClient","createApolloClient","initialState","httpLink","uri","credentials","authLink","_","prevCtxt","headers","token","cache","restore","client","ssrMode","link","concat","data","applier","__typename","name","email","applicationProfile","birthDate","birthPlace","residence","phoneNumber","nationality","nicNumber","nicDateOfIssue","nicPlaceOfIssue","highestAcademicQualification","yearOfIssue","Date","getFullYear","englishGradeInGCEOL","mathematicsGradeInGCEOL","professionalQualification","employmentStatus","jobTitle","yearsOfExperience","employerName","employerAddress","otherDetails","writeData","onResetStore","initApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","getInitialProps","ctx","res","finished","getDataFromTree","AppTree","error","console","rewind","extract"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { baseUrl, authCookieName } from '../app.config'\nimport Head from 'next/head'\nimport fetch from 'isomorphic-unfetch'\nimport { getCookieFromBrowser } from '../lib/cookie'\nimport { typeDefs, resolvers } from '../lib/graphql/clientSchema'\n\nlet apolloClient = null\n\nfunction createApolloClient(initialState = {}) {\n  const httpLink = new HttpLink({\n    uri: `${baseUrl}/graphql`,\n    credentials: 'same-origin',\n    fetch,\n    \n  })\n\n  const authLink = setContext((_, prevCtxt) => {\n    let headers = prevCtxt.headers || {}\n    \n    if (!headers['schoolman_token']) {\n      const token = getCookieFromBrowser(authCookieName)\n      headers = { ...headers, 'schoolman_token': token || '' }\n    }\n    \n    return ({ headers })\n  })\n\n  const cache = new InMemoryCache().restore(initialState)\n\n  const client = new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    cache,\n    link: authLink.concat(httpLink),\n    typeDefs,\n    resolvers\n  })\n\n  const data = { // initial LocalState\n    applier: {\n      __typename: 'Applier',\n      name: '',\n      email: ''\n    },\n\n    applicationProfile: {\n      __typename: 'ProfileData',\n      birthDate: null,\n      birthPlace: '',\n      residence: '',\n      phoneNumber: '',\n      nationality: '',\n      nicNumber: '',\n      nicDateOfIssue: null,\n      nicPlaceOfIssue: '',\n      highestAcademicQualification: '',\n      yearOfIssue: new Date().getFullYear(),\n      englishGradeInGCEOL: '',\n      mathematicsGradeInGCEOL: '',\n      professionalQualification: '',\n      employmentStatus: 'JobSeeker',\n      jobTitle: '',\n      yearsOfExperience: 0,\n      employerName: '',\n      employerAddress: '',\n      otherDetails: null\n    }\n  } \n\n  cache.writeData({ data })\n  client.onResetStore(() => cache.writeData({ data }))\n\n  return client\n}\n\nfunction initApolloClient(initialState) {\n  if (typeof window === 'undefined') return createApolloClient(initialState)\n  if (!apolloClient) apolloClient = createApolloClient(initialState)\n  return apolloClient\n}\n\nexport default function withApollo(PageComponent, { ssr = true } = {}) {\n\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = initApolloClient()\n      ctx.apolloClient = apolloClient\n\n      let pageProps = {}\n      if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx)\n\n      // Only on the server\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished. No point in continuing to render\n        if (ctx.res && ctx.res.finished) return pageProps\n        \n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            const { AppTree } = ctx\n            await getDataFromTree(<AppTree pageProps={{ ...pageProps, apolloClient }} />)\n          } catch (error) {\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n"]},"metadata":{},"sourceType":"module"}