{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport flush from 'styled-jsx/server';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { ServerStyleSheets } from '@material-ui/styles';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    // Render app and page and get the context of the page with collected side effects.\n    const sheets = new ServerStyleSheets();\n    const originalRenderPage = ctx.renderPage;\n\n    ctx.renderPage = () => originalRenderPage({\n      enhanceApp: App => props => sheets.collect(__jsx(App, props))\n    });\n\n    const initialProps = await Document.getInitialProps(ctx);\n    return _objectSpread({}, initialProps, {\n      // Styles fragment is rendered after the app and page rendering finish.\n      styles: __jsx(React.Fragment, null, sheets.getStyleElement(), flush() || null)\n    });\n  }\n\n  render() {\n    return __jsx(Html, null, __jsx(Head, null, __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\n    }), __jsx(\"meta\", {\n      charSet: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/icon?family=Material+Icons\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"/_next/static/style.css\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"/css/styles.css\"\n    })), __jsx(\"body\", null, __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n}\n\nexport default MyDocument;","map":null,"metadata":{},"sourceType":"module"}