{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Alert from '../components/Alert';\nimport validator from 'validator';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Button } from '@material-ui/core';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Editor, EditorState, ContentState, convertToRaw, convertFromHTML, RichUtils } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\n\nfunction ProfileForm({\n  profile,\n  submitText,\n  onSubmit\n}) {\n  const classes = makeStyles(theme => createStyles({\n    fieldGroup: {\n      marginBottom: 25,\n      padding: 10\n    },\n    groupTitle: {\n      fontSize: '16pt',\n      color: '#808080',\n      paddingBottom: 5,\n      borderBottom: '1px solid #DFDFDF',\n      marginBottom: 15\n    },\n    field: {\n      marginBottom: 30\n    }\n  }))();\n  const {\n    0: inputErrors,\n    1: setInputErrors\n  } = useState({\n    birthDateErrors: [],\n    birthPlaceErrors: [],\n    residenceErrors: [],\n    phoneNumberErrors: [],\n    nationalityErrors: []\n  });\n  const {\n    0: alertOptions,\n    1: setAlertOptions\n  } = useState({\n    open: false,\n    level: 'info',\n    message: ''\n  });\n\n  function contentFrom(content) {\n    if (false) {\n      const {\n        contentBlocks,\n        entityMap\n      } = convertFromHTML(content);\n      return ContentState.createFromBlockArray(contentBlocks, entityMap);\n    }\n\n    return ContentState.createFromText(content);\n  } // Fields state variables\n\n\n  const {\n    0: birthDate,\n    1: setBirthDate\n  } = useState(profile && profile.birthDate ? new Date(profile.birthDate) : null);\n  const {\n    0: birthPlace,\n    1: setBirthPlace\n  } = useState(profile && profile.birthPlace ? profile.birthPlace : '');\n  const {\n    0: residence,\n    1: setResidence\n  } = useState(profile && profile.residence ? profile.residence : '');\n  const {\n    0: phoneNumber,\n    1: setPhoneNumber\n  } = useState(profile && profile.phoneNumber ? profile.phoneNumber : '');\n  const {\n    0: nationality,\n    1: setNationality\n  } = useState(profile && profile.nationality ? profile.nationality : '');\n  const {\n    0: otherDetails,\n    1: setOtherDetails\n  } = useState(profile && profile.otherDetails ? EditorState.createWithContent(contentFrom(profile.otherDetails)) : EditorState.createEmpty());\n\n  const validateData = () => {\n    const birthDateErrors = [];\n    const birthPlaceErrors = [];\n    const residenceErrors = [];\n    const phoneNumberErrors = [];\n    const nationalityErrors = [];\n    if (!birthDate) birthDateErrors.push('Your birth day is required');\n    if (validator.isEmpty(birthPlace)) birthPlaceErrors.push('Your birth place is required');\n    if (validator.isEmpty(residence)) residenceErrors.push('Your residence is required');\n    if (validator.isEmpty(phoneNumber)) phoneNumberErrors.push('Your phone number is required');\n    if (validator.isEmpty(nationality)) nationalityErrors.push('Your nationality is required');\n    const isValid = birthDateErrors.length == 0 && birthPlaceErrors.length == 0 && residenceErrors.length == 0 && phoneNumberErrors.length == 0 && nationalityErrors.length == 0;\n    const errors = {\n      birthDateErrors,\n      birthPlaceErrors,\n      residenceErrors,\n      phoneNumberErrors,\n      nationalityErrors\n    };\n    return {\n      isValid,\n      errors\n    };\n  };\n\n  const submit = cb => {\n    const {\n      isValid,\n      errors\n    } = validateData();\n    setInputErrors(errors);\n    if (!isValid) return cb('Please enter valid inputs');\n    return cb('', {\n      birthDate: birthDate ? birthDate.toISOString() : null,\n      birthPlace,\n      residence,\n      phoneNumber,\n      nationality,\n      otherDetails: draftToHtml(convertToRaw(otherDetails.getCurrentContent()))\n    });\n  };\n\n  function onChange(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setOtherDetails(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Personal Information\"), __jsx(\"div\", null, __jsx(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils\n  }, __jsx(DatePicker, {\n    className: classes.field,\n    autoOk: true,\n    fullWidth: true,\n    format: \"MM/dd/yyyy\",\n    variant: \"inline\",\n    id: \"birthDate\",\n    label: \"Birthdate\",\n    value: birthDate,\n    onChange: setBirthDate,\n    error: inputErrors.birthDateErrors.length > 0,\n    helperText: inputErrors.birthDateErrors.join(', ')\n  })), __jsx(TextField, {\n    className: classes.field,\n    id: \"birthPlace\",\n    name: \"birthPlace\",\n    label: \"Birth place\",\n    fullWidth: true,\n    value: birthPlace,\n    onChange: e => setBirthPlace(e.target.value),\n    error: inputErrors.birthPlaceErrors.length > 0,\n    helperText: inputErrors.birthPlaceErrors.join(', ')\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"residence\",\n    name: \"residence\",\n    label: \"Residence\",\n    fullWidth: true,\n    value: residence,\n    onChange: e => setResidence(e.target.value),\n    error: inputErrors.residenceErrors.length > 0,\n    helperText: inputErrors.residenceErrors.join(', ')\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"phoneNumber\",\n    name: \"phoneNumber\",\n    label: \"Phone number\",\n    fullWidth: true,\n    value: phoneNumber,\n    onChange: e => setPhoneNumber(e.target.value),\n    error: inputErrors.phoneNumberErrors.length > 0,\n    helperText: inputErrors.phoneNumberErrors.join(', ')\n  }), __jsx(TextField, {\n    id: \"nationality\",\n    name: \"nationality\",\n    label: \"Nationality\",\n    fullWidth: true,\n    value: nationality,\n    onChange: e => setNationality(e.target.value),\n    error: inputErrors.nationalityErrors.length > 0,\n    helperText: inputErrors.nationalityErrors.join(', ')\n  }))), __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Other Details\"), __jsx(\"div\", {\n    style: {\n      fontSize: '9pt',\n      color: '#808080',\n      marginBottom: 10\n    }\n  }, \"Please provide additional details here, anything that is valuable for you. For example, if you already have records with Cisco, ACCA, CIPS, or whichever program you want to apply for, kindly provide references here.\"), __jsx(\"div\", {\n    style: {\n      border: '1px solid #DFDFDF',\n      padding: 5,\n      borderRadius: 5\n    }\n  }, false && __jsx(Editor, {\n    editorState: otherDetails,\n    onChange: editorState => setOtherDetails(editorState),\n    handleKeyCommand: onChange\n  }))), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => submit((errMessage, data) => {\n      if (errMessage) return setAlertOptions({\n        open: true,\n        level: 'error',\n        message: errMessage\n      });\n      if (data) return onSubmit(data);\n      return;\n    })\n  }, `${submitText || 'Save'}`)), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: () => setAlertOptions({\n      open: false,\n      level: alertOptions.level,\n      message: alertOptions.message\n    })\n  }));\n}\n\nexport default ProfileForm;","map":null,"metadata":{},"sourceType":"module"}