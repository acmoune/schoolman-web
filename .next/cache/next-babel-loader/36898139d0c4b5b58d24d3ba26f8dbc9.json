{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { gql } from 'apollo-boost';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Link from 'next/link';\nimport DepList from '../components/catalog/DepList';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Hidden, Paper } from '@material-ui/core';\nimport ProgramSummaryContent from '../components/catalog/ProgramSummaryContent';\nimport TrainingSummary from '../components/catalog/TrainingSummary';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nconst GET_DEPARTMENTS_QUERY = gql`\n  query getDepartments {\n    departments {\n      id \n      title\n      programs {\n        id \n        title \n        description \n        logo \n        link \n        trainings { id title description banner link }\n      }\n    }\n  }\n`;\n\nfunction ProgramPage({\n  programId,\n  departments\n}) {\n  const filtered = departments.flatMap(d => d.programs).filter(p => p.id == programId);\n  const program = filtered.length > 0 ? filtered[0] : null;\n  if (!program) return __jsx(\"div\", null, \"Program not found\");\n  return __jsx(MainLayout, {\n    title: `${program.title} - Program -  IMIT`\n  }, __jsx(Container, null, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    sm: 3\n  }, __jsx(DepList, {\n    deps: departments,\n    selectedProgramId: programId\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Paper, {\n    style: {\n      padding: 15\n    }\n  }, __jsx(ProgramSummaryContent, {\n    program: program,\n    displayLink: true\n  })), __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: 'center',\n      margin: '15px 0px'\n    }\n  }, \"Available training courses\"), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, program.trainings.map(t => __jsx(Grid, {\n    item: true,\n    sm: 6\n  }, __jsx(Link, {\n    href: {\n      pathname: '/training',\n      query: {\n        trainingId: t.id\n      }\n    },\n    passHref: true\n  }, __jsx(TrainingSummary, {\n    training: t\n  }))))))))));\n}\n\nProgramPage.getInitialProps = async ({\n  query,\n  apolloClient,\n  token\n}) => {\n  const {\n    data: {\n      departments\n    }\n  } = await apolloClient.query({\n    query: GET_DEPARTMENTS_QUERY,\n    context: {\n      headers: {\n        'schoolman_token': token\n      }\n    }\n  });\n  return {\n    departments,\n    programId: query.programId,\n    authRequired: false\n  };\n};\n\nexport default withApollo(withAuth(ProgramPage));","map":null,"metadata":{},"sourceType":"module"}