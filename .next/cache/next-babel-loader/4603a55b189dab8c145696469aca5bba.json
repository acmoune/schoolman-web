{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getTrainingById($trainingId: ID!) {\\n    training(trainingId: $trainingId) {\\n      id\\n      title\\n      description\\n      banner\\n      link\\n      requiredOptionalUnits\\n      prerequisites\\n      qualifications\\n      units { id title syllabus optional }\\n      plans {\\n        id\\n        title\\n        description\\n        duration\\n        fees { id description feeType amount promotionalAmount optional }\\n        currentSessions {\\n          id\\n          title\\n          startDate\\n          status\\n          fees { id description feeType amount promotionalAmount optional }\\n        }\\n      }\\n      program {id title logo }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { gql } from 'apollo-boost';\nimport { apiServer } from '../app.config';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nimport s3 from '../lib/s3';\nimport { currency } from '../lib/utilities';\nimport { Paper, Typography, Grid, Table, TableHead, TableBody, TableRow, TableCell, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Button } from '@material-ui/core';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { ProgramMini } from '../components/catalog/DepList';\n\nfunction Units(props) {\n  var classes = makeStyles(function (theme) {\n    return createStyles({\n      root: {\n        marginTop: 20\n      },\n      heading: {\n        flexGrow: 1\n      },\n      secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary\n      }\n    });\n  })();\n\n  var _React$useState = React.useState(-1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currPanelId = _React$useState2[0],\n      setCurrPanelId = _React$useState2[1];\n\n  var handleChange = function handleChange(id) {\n    return function (event) {\n      if (id === currPanelId) setCurrPanelId(-1);else setCurrPanelId(id);\n    };\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    style: {\n      color: '#248857',\n      marginBottom: 10\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\"\n  }, \"Units\")), props.units.length > 0 ? props.units.map(function (u) {\n    return __jsx(ExpansionPanel, {\n      expanded: currPanelId === u.id,\n      onChange: handleChange(u.id),\n      key: u.id\n    }, __jsx(ExpansionPanelSummary, {\n      expandIcon: __jsx(ExpandMoreIcon, null),\n      \"aria-controls\": \"panel\".concat(u.id),\n      id: \"panel\".concat(u.id)\n    }, __jsx(Typography, {\n      className: classes.heading,\n      variant: \"inherit\"\n    }, u.title), __jsx(Typography, {\n      className: classes.secondaryHeading\n    }, u.optional ? 'Optional' : 'Required')), __jsx(ExpansionPanelDetails, null, __jsx(\"div\", {\n      style: {\n        flexGrow: 1\n      }\n    }, __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: u.syllabus\n      }\n    }))));\n  }) : __jsx(\"span\", null, \"No Units\"));\n}\n\nfunction Plan(props) {\n  var router = useRouter();\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      paddingLeft: 15,\n      borderLeft: '1px solid #DFDFDF'\n    }\n  }, __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"h5\"\n  }, props.plan.title)), __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"caption\",\n    style: {\n      color: '#808080'\n    }\n  }, props.plan.description)), __jsx(\"div\", {\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(Table, {\n    size: \"small\",\n    style: {\n      border: '1px solid #DFDFDF'\n    }\n  }, __jsx(TableBody, null, __jsx(TableRow, {\n    key: \"duration\"\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    style: {\n      color: '#808080'\n    }\n  }, \"Duration\"), __jsx(TableCell, {\n    align: \"right\"\n  }, props.plan.duration))))), __jsx(\"div\", {\n    style: {\n      color: '#808080',\n      marginTop: 15,\n      fontSize: '11pt'\n    }\n  }, \"Fees\"), props.plan.fees.length > 0 ? __jsx(\"div\", {\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(Table, {\n    size: \"small\",\n    style: {\n      border: '1px solid #DFDFDF'\n    }\n  }, __jsx(TableHead, {\n    style: {\n      backgroundColor: '#DFDFDF'\n    }\n  }, __jsx(TableRow, null, __jsx(TableCell, null, \"Description\"), __jsx(TableCell, null, \"Type\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"Amount\"))), __jsx(TableBody, null, props.plan.fees.map(function (f) {\n    return __jsx(TableRow, {\n      key: f.id\n    }, __jsx(TableCell, null, f.description, \" \", f.optional && __jsx(\"span\", {\n      style: {\n        color: '#808080'\n      }\n    }, \"(Optional)\")), __jsx(TableCell, null, f.feeType), __jsx(TableCell, {\n      align: \"right\"\n    }, f.promotionalAmount > 0 ? __jsx(\"div\", null, __jsx(\"span\", {\n      style: {\n        textDecoration: 'line-through'\n      }\n    }, currency(f.amount)), \" \\xA0\", __jsx(\"span\", {\n      style: {\n        color: 'orange'\n      }\n    }, currency(f.promotionalAmount))) : __jsx(\"span\", null, currency(f.amount))));\n  })))) : __jsx(\"span\", null, \"No fees\"), __jsx(\"div\", {\n    style: {\n      color: '#808080',\n      marginTop: 15,\n      fontSize: '11pt'\n    }\n  }, \"Current Sessions\"), props.plan.currentSessions.length > 0 ? __jsx(\"div\", {\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(Table, {\n    size: \"small\",\n    style: {\n      border: '1px solid #DFDFDF'\n    }\n  }, __jsx(TableHead, {\n    style: {\n      backgroundColor: '#DFDFDF'\n    }\n  }, __jsx(TableRow, null, __jsx(TableCell, null, \"Title\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"Start date\"), __jsx(TableCell, null, \"Status\"), __jsx(TableCell, null))), __jsx(TableBody, null, props.plan.currentSessions.map(function (s) {\n    return __jsx(TableRow, {\n      key: s.id\n    }, __jsx(TableCell, null, s.title), __jsx(TableCell, {\n      align: \"right\"\n    }, s.startDate || 'Not specified'), __jsx(TableCell, null, s.status), __jsx(TableCell, {\n      align: \"right\"\n    }, __jsx(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      size: \"small\",\n      onClick: function onClick() {\n        return router.push({\n          pathname: '/application',\n          query: {\n            tsId: s.id\n          }\n        });\n      }\n    }, \"Apply\")));\n  })))) : __jsx(\"span\", null, \"There is no new session right now, we should schedule one shortly, please check again later\")));\n}\n\nfunction Plans(props) {\n  var classes = makeStyles(function (theme) {\n    return createStyles({\n      root: {\n        marginTop: 20\n      },\n      planItem: {\n        fontSize: '11pt',\n        color: '#808080',\n        cursor: 'pointer',\n        padding: 5,\n        borderRadius: 3\n      },\n      selectedPlanItem: {\n        backgroundColor: '#DFDFDF'\n      }\n    });\n  })();\n\n  var _React$useState3 = React.useState(props.plans.length > 0 ? 0 : -1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      currentPlanId = _React$useState4[0],\n      setCurrentPlanId = _React$useState4[1];\n\n  var handleClick = function handleClick(id) {\n    return function (event) {\n      return setCurrentPlanId(id);\n    };\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    style: {\n      color: '#248857',\n      marginBottom: 10\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\"\n  }, \"Plans\")), __jsx(Paper, {\n    style: {\n      padding: 15\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, props.plans.map(function (p, i) {\n    return __jsx(\"div\", {\n      key: p.id,\n      className: \"\".concat(classes.planItem, \" \").concat(i === currentPlanId ? classes.selectedPlanItem : ''),\n      onClick: handleClick(i),\n      style: {\n        position: 'relative',\n        paddingRight: 22\n      }\n    }, p.title, p.currentSessions.length > 0 && __jsx(\"span\", {\n      style: {\n        fontSize: '8pt',\n        width: 16,\n        height: 16,\n        textAlign: 'center',\n        borderRadius: '50%',\n        backgroundColor: '#444444',\n        color: 'white',\n        position: 'absolute',\n        right: 5,\n        top: 7,\n        display: 'inline-block'\n      }\n    }, p.currentSessions.length));\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 8\n  }, currentPlanId !== -1 ? __jsx(Plan, {\n    plan: props.plans[currentPlanId]\n  }) : __jsx(\"span\", null, \"No plan selected\")))));\n}\n\nvar GET_ONE_TRAINING_QUERY = gql(_templateObject());\n\nfunction TrainingPage(props) {\n  var t = props.training;\n  var banner = t.banner ? s3.getFileUrl(t.banner) : \"\".concat(apiServer, \"/assets/images/trainings/no-banner.jpg\");\n  return __jsx(MainLayout, {\n    title: \"\".concat(props.training.title, \" - Training -  IMIT\")\n  }, __jsx(Container, null, __jsx(Paper, {\n    style: {\n      borderRadius: 0,\n      marginTop: 15\n    }\n  }, __jsx(Link, {\n    href: {\n      pathname: \"/program\",\n      query: {\n        programId: t.program.id\n      }\n    },\n    passHref: true\n  }, __jsx(ProgramMini, {\n    program: t.program,\n    style: {\n      marginBottom: 0,\n      fontWeight: 'bold'\n    }\n  }))), __jsx(\"img\", {\n    src: banner,\n    alt: \"\",\n    style: {\n      width: '100%',\n      marginTop: 0\n    }\n  }), __jsx(Paper, {\n    style: {\n      padding: 15,\n      marginTop: 5\n    }\n  }, __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"h5\"\n  }, t.title)), __jsx(\"div\", null, __jsx(Typography, {\n    variant: \"caption\",\n    style: {\n      color: '#808080'\n    }\n  }, t.description)), __jsx(\"div\", null, t.link ? __jsx(\"div\", null, __jsx(\"a\", {\n    href: t.link,\n    style: {\n      textDecoration: 'none',\n      fontSize: '8pt',\n      color: '#339967'\n    }\n  }, \"Official  vendor link\")) : null), __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Table, {\n    size: \"small\",\n    style: {\n      border: '1px solid #DFDFDF'\n    }\n  }, __jsx(TableBody, null, t.prerequisites && __jsx(TableRow, {\n    key: t.prerequisites\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    style: {\n      color: '#808080'\n    }\n  }, \"Prerequisites\"), __jsx(TableCell, {\n    align: \"right\"\n  }, t.prerequisites)), t.qualifications && __jsx(TableRow, {\n    key: t.qualifications\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    style: {\n      color: '#808080'\n    }\n  }, \"Qualifications\"), __jsx(TableCell, {\n    align: \"right\"\n  }, t.qualifications)), __jsx(TableRow, {\n    key: \"reqNum\"\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    style: {\n      color: '#808080'\n    }\n  }, \"Required number of optional units\"), __jsx(TableCell, {\n    align: \"right\"\n  }, t.requiredOptionalUnits || 0)))))), __jsx(Plans, {\n    plans: t.plans\n  }), __jsx(Units, {\n    units: t.units\n  })));\n}\n\nTrainingPage.getInitialProps = function _callee(_ref) {\n  var query, apolloClient, token, _ref2, training;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query, apolloClient = _ref.apolloClient, token = _ref.token;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_ONE_TRAINING_QUERY,\n            variables: {\n              trainingId: _parseInt(query.trainingId, 10)\n            },\n            context: {\n              headers: {\n                'schoolman_token': token\n              }\n            }\n          }));\n\n        case 3:\n          _ref2 = _context.sent;\n          training = _ref2.data.training;\n          return _context.abrupt(\"return\", {\n            training: training,\n            authRequired: false\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withApollo(withAuth(TrainingPage));","map":null,"metadata":{},"sourceType":"module"}