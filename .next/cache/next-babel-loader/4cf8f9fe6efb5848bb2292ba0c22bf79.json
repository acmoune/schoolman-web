{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { baseUrl, authCookieName } from '../app.config';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { getCookieFromBrowser } from '../lib/cookie';\nimport { typeDefs, resolvers } from '../lib/graphql/clientSchema';\nvar apolloClient = null;\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var httpLink = new HttpLink({\n    uri: \"\".concat(baseUrl, \"/graphql\"),\n    credentials: 'same-origin',\n    fetch: fetch\n  });\n  var authLink = setContext(function (_, prevCtxt) {\n    var headers = prevCtxt.headers || {};\n\n    if (!headers['schoolman_token']) {\n      var token = getCookieFromBrowser(authCookieName);\n      headers = _objectSpread({}, headers, {\n        'schoolman_token': token || ''\n      });\n    }\n\n    return {\n      headers: headers\n    };\n  });\n  var cache = new InMemoryCache().restore(initialState);\n  var client = new ApolloClient({\n    ssrMode: false,\n    cache: cache,\n    link: authLink.concat(httpLink),\n    typeDefs: typeDefs,\n    resolvers: resolvers,\n    connectToDevTools: true\n  });\n  var data = {\n    // initial LocalState\n    applier: {\n      __typename: 'Applier',\n      name: '',\n      email: ''\n    },\n    applicationProfile: {\n      __typename: 'ProfileData',\n      birthDate: null,\n      birthPlace: '',\n      residence: '',\n      phoneNumber: '',\n      nationality: '',\n      nicNumber: '',\n      nicDateOfIssue: null,\n      nicPlaceOfIssue: '',\n      highestAcademicQualification: '',\n      yearOfIssue: new Date().getFullYear(),\n      englishGradeInGCEOL: '',\n      mathematicsGradeInGCEOL: '',\n      professionalQualification: '',\n      employmentStatus: 'JobSeeker',\n      jobTitle: '',\n      yearsOfExperience: 0,\n      employerName: '',\n      employerAddress: '',\n      otherDetails: null\n    }\n  };\n  cache.writeData({\n    data: data\n  });\n  client.onResetStore(function () {\n    return cache.writeData({\n      data: data\n    });\n  });\n  return client;\n}\n\nfunction initApolloClient(initialState) {\n  if (false) return createApolloClient(initialState);\n  if (!apolloClient) apolloClient = createApolloClient(initialState);\n  return apolloClient;\n}\n\nexport default function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(PageComponent, pageProps));\n  };\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var apolloClient, pageProps, _ref3, getDataFromTree, AppTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Initialize ApolloClient, add it to the ctx object so\n              // we can use it in `PageComponent.getInitialProp`.\n              apolloClient = initApolloClient();\n              ctx.apolloClient = apolloClient;\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              pageProps = _context.sent;\n\n            case 7:\n              if (!false) {\n                _context.next = 25;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 10:\n              if (!ssr) {\n                _context.next = 25;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 14:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              AppTree = ctx.AppTree;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                })\n              })));\n\n            case 19:\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](11);\n              console.error('Error while running `getDataFromTree`', _context.t0);\n\n            case 24:\n              // getDataFromTree does not call componentWillUnmount head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 25:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[11, 21]]);\n    };\n  }\n\n  return WithApollo;\n}","map":{"version":3,"sources":["/data/apps/school-manager-client/lib/with-apollo.jsx"],"names":["React","ApolloClient","InMemoryCache","HttpLink","setContext","ApolloProvider","baseUrl","authCookieName","Head","fetch","getCookieFromBrowser","typeDefs","resolvers","apolloClient","createApolloClient","initialState","httpLink","uri","credentials","authLink","_","prevCtxt","headers","token","cache","restore","client","ssrMode","link","concat","connectToDevTools","data","applier","__typename","name","email","applicationProfile","birthDate","birthPlace","residence","phoneNumber","nationality","nicNumber","nicDateOfIssue","nicPlaceOfIssue","highestAcademicQualification","yearOfIssue","Date","getFullYear","englishGradeInGCEOL","mathematicsGradeInGCEOL","professionalQualification","employmentStatus","jobTitle","yearsOfExperience","employerName","employerAddress","otherDetails","writeData","onResetStore","initApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","getInitialProps","ctx","res","finished","getDataFromTree","AppTree","console","error","rewind","extract"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { baseUrl, authCookieName } from '../app.config'\nimport Head from 'next/head'\nimport fetch from 'isomorphic-unfetch'\nimport { getCookieFromBrowser } from '../lib/cookie'\nimport { typeDefs, resolvers } from '../lib/graphql/clientSchema'\n\nlet apolloClient = null\n\nfunction createApolloClient(initialState = {}) {\n  const httpLink = new HttpLink({\n    uri: `${baseUrl}/graphql`,\n    credentials: 'same-origin',\n    fetch,\n    \n  })\n\n  const authLink = setContext((_, prevCtxt) => {\n    let headers = prevCtxt.headers || {}\n    \n    if (!headers['schoolman_token']) {\n      const token = getCookieFromBrowser(authCookieName)\n      headers = { ...headers, 'schoolman_token': token || '' }\n    }\n    \n    return ({ headers })\n  })\n\n  const cache = new InMemoryCache().restore(initialState)\n\n  const client = new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    cache,\n    link: authLink.concat(httpLink),\n    typeDefs,\n    resolvers,\n    connectToDevTools: true\n  })\n\n  const data = { // initial LocalState\n    applier: {\n      __typename: 'Applier',\n      name: '',\n      email: ''\n    },\n\n    applicationProfile: {\n      __typename: 'ProfileData',\n      birthDate: null,\n      birthPlace: '',\n      residence: '',\n      phoneNumber: '',\n      nationality: '',\n      nicNumber: '',\n      nicDateOfIssue: null,\n      nicPlaceOfIssue: '',\n      highestAcademicQualification: '',\n      yearOfIssue: new Date().getFullYear(),\n      englishGradeInGCEOL: '',\n      mathematicsGradeInGCEOL: '',\n      professionalQualification: '',\n      employmentStatus: 'JobSeeker',\n      jobTitle: '',\n      yearsOfExperience: 0,\n      employerName: '',\n      employerAddress: '',\n      otherDetails: null\n    }\n  } \n\n  cache.writeData({ data })\n  client.onResetStore(() => cache.writeData({ data }))\n\n  return client\n}\n\nfunction initApolloClient(initialState) {\n  if (typeof window === 'undefined') return createApolloClient(initialState)\n  if (!apolloClient) apolloClient = createApolloClient(initialState)\n  return apolloClient\n}\n\nexport default function withApollo(PageComponent, { ssr = true } = {}) {\n\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = initApolloClient()\n      ctx.apolloClient = apolloClient\n\n      let pageProps = {}\n      if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx)\n\n      // Only on the server\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished. No point in continuing to render\n        if (ctx.res && ctx.res.finished) return pageProps\n        \n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            const { AppTree } = ctx\n            await getDataFromTree(<AppTree pageProps={{ ...pageProps, apolloClient }} />)\n          } catch (error) {\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n"]},"metadata":{},"sourceType":"module"}