{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { baseUrl, authCookieName } from '../app.config';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { getCookieFromBrowser } from '../lib/cookie';\nimport { typeDefs, resolvers } from '../lib/graphql/clientSchema';\nvar apolloClient = null;\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var httpLink = new HttpLink({\n    uri: \"\".concat(baseUrl, \"/graphql\"),\n    credentials: 'same-origin',\n    fetch: fetch\n  });\n  var authLink = setContext(function (_, prevCtxt) {\n    var headers = prevCtxt.headers || {};\n\n    if (!headers['schoolman_token']) {\n      var token = getCookieFromBrowser(authCookieName);\n      headers = _objectSpread({}, headers, {\n        'schoolman_token': token || ''\n      });\n    }\n\n    return {\n      headers: headers\n    };\n  });\n  var cache = new InMemoryCache().restore(initialState);\n  var client = new ApolloClient({\n    ssrMode: false,\n    cache: cache,\n    link: authLink.concat(httpLink),\n    typeDefs: typeDefs,\n    resolvers: resolvers\n  });\n  var data = {\n    // initial LocalState\n    applier: {\n      __typename: 'Applier',\n      name: '',\n      email: ''\n    },\n    applicationProfile: {\n      __typename: 'ProfileData',\n      birthDate: null,\n      birthPlace: '',\n      residence: '',\n      phoneNumber: '',\n      nationality: '',\n      nicNumber: '',\n      nicDateOfIssue: null,\n      nicPlaceOfIssue: '',\n      highestAcademicQualification: '',\n      yearOfIssue: new Date().getFullYear(),\n      englishGradeInGCEOL: '',\n      mathematicsGradeInGCEOL: '',\n      professionalQualification: '',\n      employmentStatus: 'JobSeeker',\n      jobTitle: '',\n      yearsOfExperience: 0,\n      employerName: '',\n      employerAddress: '',\n      otherDetails: null\n    }\n  };\n  cache.writeData({\n    data: data\n  });\n  client.onResetStore(function () {\n    return cache.writeData({\n      data: data\n    });\n  });\n  return client;\n}\n\nfunction initApolloClient(initialState) {\n  if (false) return createApolloClient(initialState);\n  if (!apolloClient) apolloClient = createApolloClient(initialState);\n  return apolloClient;\n}\n\nexport default function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(PageComponent, pageProps));\n  };\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var apolloClient, pageProps, _ref3, getDataFromTree, AppTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Initialize ApolloClient, add it to the ctx object so\n              // we can use it in `PageComponent.getInitialProp`.\n              apolloClient = initApolloClient();\n              ctx.apolloClient = apolloClient;\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              pageProps = _context.sent;\n\n            case 7:\n              if (!false) {\n                _context.next = 25;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 10:\n              if (!ssr) {\n                _context.next = 25;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 14:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              AppTree = ctx.AppTree;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                })\n              })));\n\n            case 19:\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](11);\n              console.error('Error while running `getDataFromTree`', _context.t0);\n\n            case 24:\n              // getDataFromTree does not call componentWillUnmount head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 25:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[11, 21]]);\n    };\n  }\n\n  return WithApollo;\n}","map":null,"metadata":{},"sourceType":"module"}