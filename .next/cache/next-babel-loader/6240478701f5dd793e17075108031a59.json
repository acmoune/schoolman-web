{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getMyTrainings($accountId: ID!) {\\n    enrollments(accountId: $accountId) {\\n      enrollmentId\\n      sessionTitle\\n      trainingTitle\\n      planTitle\\n      programTitle\\n      departmentTitle\\n      startDate\\n      duration\\n      sessionStatus\\n      bills {\\n        billId\\n        feeType\\n        description\\n        amount\\n        payments { paymentId amount date }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport MainLayout from '../layouts/MainLayout';\nimport { gql } from 'apollo-boost';\nimport Container from '../components/Container';\nimport EnrollmentItem from '../components/EnrollmentItem';\nimport { Typography, Button } from '@material-ui/core';\nimport Enrollment from '../components/Enrollment';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nvar GET_MY_TRAININGS_QUERY = gql(_templateObject());\n\nfunction ListView(_ref) {\n  var enrollments = _ref.enrollments,\n      _onSelect = _ref.onSelect;\n  return __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    style: {\n      marginBottom: 10\n    }\n  }, \"My Training courses\"), enrollments.map(function (e) {\n    return __jsx(EnrollmentItem, {\n      enrollment: e,\n      onSelect: function onSelect() {\n        return _onSelect(e);\n      }\n    });\n  }));\n}\n\nfunction ItemView(_ref2) {\n  var enrollment = _ref2.enrollment,\n      onBack = _ref2.onBack;\n  var totalBills = enrollment.bills.map(function (b) {\n    return b.amount;\n  }).reduce(function (s, i) {\n    return s + i;\n  }, 0);\n  var totalPayments = enrollment.bills.flatMap(function (b) {\n    return b.payments.map(function (p) {\n      return p.amount;\n    });\n  }).reduce(function (s, i) {\n    return s + i;\n  }, 0);\n  var isOwingMoney = totalPayments < totalBills;\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      marginTop: 15,\n      marginBottom: 10,\n      display: 'flex',\n      alignItems: 'center'\n    }\n  }, __jsx(\"div\", null, __jsx(Button, {\n    onClick: function onClick() {\n      return onBack();\n    },\n    size: \"small\",\n    variant: \"text\"\n  }, \"Back to list\"))), __jsx(Enrollment, {\n    enrollment: enrollment\n  }));\n}\n\nfunction MyTrainingsPage(_ref3) {\n  var enrollments = _ref3.enrollments;\n\n  var _useState = useState(null),\n      selectedEnrollment = _useState[0],\n      selectEnrollment = _useState[1];\n\n  return __jsx(MainLayout, {\n    title: \"My Training courses\"\n  }, __jsx(Container, null, selectedEnrollment ? __jsx(ItemView, {\n    enrollment: selectedEnrollment,\n    onBack: function onBack() {\n      return selectEnrollment(null);\n    }\n  }) : __jsx(ListView, {\n    enrollments: enrollments,\n    onSelect: function onSelect(item) {\n      return selectEnrollment(item);\n    }\n  })));\n}\n\nMyTrainingsPage.getInitialProps = function _callee(_ref4) {\n  var apolloClient, token, currentUser, _ref5, enrollments;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          apolloClient = _ref4.apolloClient, token = _ref4.token, currentUser = _ref4.currentUser;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_MY_TRAININGS_QUERY,\n            variables: {\n              accountId: currentUser.id\n            },\n            context: {\n              headers: {\n                'schoolman_token': token\n              }\n            }\n          }));\n\n        case 3:\n          _ref5 = _context.sent;\n          enrollments = _ref5.data.enrollments;\n          return _context.abrupt(\"return\", {\n            enrollments: enrollments,\n            authRequired: true\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withApollo(withAuth(MyTrainingsPage));","map":null,"metadata":{},"sourceType":"module"}