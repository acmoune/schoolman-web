{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport MainLayout from '../layouts/MainLayout';\nimport Container from '../components/Container';\nimport { Typography, Paper, TextField, Button } from '@material-ui/core';\nimport axios from 'axios';\nimport validator from 'validator';\nimport { apiBaseUrl, authCookieName } from '../app.config';\nimport { setCookie } from '../lib/cookie';\nimport Router from 'next/router';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\n\nfunction SignInPage({\n  backTo\n}) {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [inputErrors, setInputErrors] = React.useState({\n    emailErrors: [],\n    passwordErrors: []\n  });\n  const [serverError, setServerError] = React.useState([]);\n\n  const validateData = () => {\n    const emailErrors = [];\n    const passwordErrors = [];\n    if (validator.isEmpty(email)) emailErrors.push('Your email is required');\n    if (!validator.isEmail(email)) emailErrors.push('Enter a valid email address');\n    if (validator.isEmpty(password)) passwordErrors.push('Your password is required');\n    const isValid = emailErrors.length == 0 && passwordErrors.length == 0;\n    const errors = {\n      emailErrors,\n      passwordErrors\n    };\n    return {\n      isValid,\n      errors\n    };\n  };\n\n  const submit = cb => {\n    const {\n      isValid,\n      errors\n    } = validateData();\n    setInputErrors(errors);\n\n    if (!isValid && errors) {\n      return cb('Please enter valid inputs', '');\n    }\n\n    return axios.post(`${apiBaseUrl}/auth/authenticate`, {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => cb('', res.data.token)).catch(err => cb(err.response.data.message, ''));\n  };\n\n  return __jsx(MainLayout, {\n    title: \"Sign In\"\n  }, __jsx(Container, {\n    maxWidth: 400\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: 50,\n      marginBottom: 20\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    style: {\n      textAlign: 'center',\n      paddingBottom: 15\n    }\n  }, \"Sign In\"), __jsx(Paper, {\n    style: {\n      padding: 15\n    }\n  }, serverError.length > 0 && __jsx(\"div\", {\n    style: {\n      marginBottom: 15,\n      color: 'red'\n    }\n  }, serverError.join(', ')), __jsx(TextField, {\n    id: \"email\",\n    name: \"email\",\n    label: \"Email\",\n    fullWidth: true,\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    error: inputErrors.emailErrors.length > 0,\n    helperText: inputErrors.emailErrors.join(', ')\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    id: \"password\",\n    name: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    fullWidth: true,\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    error: inputErrors.passwordErrors.length > 0,\n    helperText: inputErrors.passwordErrors.join(', ')\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Button, {\n    color: \"secondary\",\n    size: \"large\",\n    fullWidth: true,\n    variant: \"contained\",\n    onClick: () => submit((errMessage, token) => {\n      if (errMessage) return setServerError([errMessage]);\n      setCookie(authCookieName, token);\n      return Router.push(backTo || '/');\n    })\n  }, \"Sign In\"))), __jsx(\"div\", {\n    style: {\n      color: '#808080',\n      fontSize: '9pt',\n      padding: 10\n    }\n  }, \"Forgot your email or password ? Please contact Administration.\")));\n}\n\nSignInPage.getInitialProps = ({\n  query\n}) => ({\n  backTo: query.backTo,\n  authRequired: false\n});\n\nexport default withApollo(withAuth(SignInPage));","map":null,"metadata":{},"sourceType":"module"}