{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/data/apps/opensource/SchoolMan/web-client/pages/program.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getDepartments {\\n    departments {\\n      id \\n      title\\n      programs {\\n        id \\n        title \\n        description \\n        logo \\n        link \\n        trainings { id title description banner link }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport { gql } from 'apollo-boost';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Link from 'next/link';\nimport DepList from '../components/catalog/DepList';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Hidden, Paper } from '@material-ui/core';\nimport ProgramSummaryContent from '../components/catalog/ProgramSummaryContent';\nimport TrainingSummary from '../components/catalog/TrainingSummary';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nvar GET_DEPARTMENTS_QUERY = gql(_templateObject());\n\nfunction ProgramPage(_ref) {\n  var programId = _ref.programId,\n      departments = _ref.departments;\n  var filtered = departments.flatMap(function (d) {\n    return d.programs;\n  }).filter(function (p) {\n    return p.id == programId;\n  });\n  var program = filtered.length > 0 ? filtered[0] : null;\n  if (!program) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Program not found\");\n  return __jsx(MainLayout, {\n    title: \"\".concat(program.title),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Hidden, {\n    smDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(DepList, {\n    deps: departments,\n    selectedProgramId: programId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(Paper, {\n    style: {\n      padding: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(ProgramSummaryContent, {\n    program: program,\n    displayLink: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), __jsx(Typography, {\n    variant: \"h5\",\n    color: \"primary\",\n    style: {\n      textAlign: 'center',\n      margin: '15px 0px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Available training courses\"), __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, program.trainings.map(function (t) {\n    return __jsx(Grid, {\n      item: true,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: {\n        pathname: '/training',\n        query: {\n          trainingId: t.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      style: {\n        textDecoration: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(TrainingSummary, {\n      training: t,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))));\n  })))))));\n}\n\nProgramPage.getInitialProps = function _callee(_ref2) {\n  var query, apolloClient, token, _ref3, departments;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query, apolloClient = _ref2.apolloClient, token = _ref2.token;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_DEPARTMENTS_QUERY,\n            context: {\n              headers: {\n                'schoolman_token': token\n              }\n            }\n          }));\n\n        case 3:\n          _ref3 = _context.sent;\n          departments = _ref3.data.departments;\n          return _context.abrupt(\"return\", {\n            departments: departments,\n            programId: query.programId,\n            authRequired: false\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withApollo(withAuth(ProgramPage));","map":{"version":3,"sources":["/data/apps/opensource/SchoolMan/web-client/pages/program.tsx"],"names":["React","gql","Container","MainLayout","Link","DepList","Typography","Grid","Hidden","Paper","ProgramSummaryContent","TrainingSummary","withApollo","withAuth","GET_DEPARTMENTS_QUERY","ProgramPage","programId","departments","filtered","flatMap","d","programs","filter","p","id","program","length","title","marginTop","padding","textAlign","margin","trainings","map","t","pathname","query","trainingId","textDecoration","getInitialProps","apolloClient","token","context","headers","data","authRequired"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { gql } from 'apollo-boost'\nimport Container from '../components/Container'\nimport MainLayout from '../layouts/MainLayout'\nimport Link from 'next/link'\nimport DepList from '../components/catalog/DepList'\nimport { Typography } from '@material-ui/core'\nimport {\n  Grid,\n  Hidden,\n  Paper\n} from '@material-ui/core'\nimport ProgramSummaryContent from '../components/catalog/ProgramSummaryContent'\nimport TrainingSummary from '../components/catalog/TrainingSummary'\nimport IDepartment from '../server/src/models/catalog/Department'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\n\nconst GET_DEPARTMENTS_QUERY = gql`\n  query getDepartments {\n    departments {\n      id \n      title\n      programs {\n        id \n        title \n        description \n        logo \n        link \n        trainings { id title description banner link }\n      }\n    }\n  }\n`\n\nfunction ProgramPage({ programId, departments }: { programId: number, departments: IDepartment[] }) {\n  const filtered = departments.flatMap(d => d.programs).filter(p => p.id == programId)\n  const program = filtered.length > 0 ? filtered[0] : null\n\n  if (!program) return <div>Program not found</div>\n\n  return (\n    <MainLayout title={`${program.title}`}>\n      <Container>\n        <Grid container spacing={1}>\n          <Hidden smDown>\n            <Grid item sm={3}>\n              <DepList deps={departments} selectedProgramId={programId} />\n            </Grid>\n          </Hidden>\n          \n          <Grid item xs={12} md={9}>\n            <div style={{ marginTop: 15 }}>\n              <Paper style={{ padding: 15 }}>\n                <ProgramSummaryContent program={program} displayLink />\n              </Paper>\n\n              <Typography variant=\"h5\" color=\"primary\" style={{textAlign: 'center', margin: '15px 0px'}}>Available training courses</Typography>\n\n              <Grid container spacing={2}>\n                {program.trainings.map((t: any) =>\n                  <Grid item sm={6}>\n                    <Link href={{ pathname: '/training', query: { trainingId: t.id } }}>\n                      <a style={{ textDecoration: 'none' }}>\n                        <TrainingSummary training={t} />\n                      </a>\n                    </Link>\n                  </Grid>\n                )}\n              </Grid>\n            </div>\n          </Grid>\n        </Grid>\n      </Container>\n    </MainLayout>\n  )\n}\n\nProgramPage.getInitialProps = async ({ query, apolloClient, token }: any) => {\n  const { data: { departments }} = await apolloClient.query({\n    query: GET_DEPARTMENTS_QUERY,\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ departments, programId: query.programId, authRequired: false })\n}\n\nexport default withApollo(withAuth(ProgramPage))\n"]},"metadata":{},"sourceType":"module"}