{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Stepper, Step, StepLabel, Button, Paper, Hidden, Typography, Table, TableHead, TableBody, TableRow, TableCell, CircularProgress } from '@material-ui/core';\nimport Container from './Container';\nimport { useAuth } from '../components/AuthContext';\nimport ProfileForm from '../components/ProfileForm';\nimport ProfileView from './ProfileView';\nimport Link from 'next/link';\nimport { gql } from 'apollo-boost';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport ApplierForm from './ApplierForm';\nimport Alert from '../components/Alert';\nimport sendMail from '../lib/send-mail';\nimport { currency } from '../lib/utilities';\nimport { applicationReceiver } from '../app.config';\nconst GET_APPLICATION_PROFILE_QUERY = gql`\n  query getApplicationProfile {\n    applicationProfile @client {\n      birthDate\n      birthPlace\n      residence\n      phoneNumber\n      nationality\n      nicNumber\n      nicDateOfIssue\n      nicPlaceOfIssue\n      highestAcademicQualification\n      yearOfIssue\n      englishGradeInGCEOL\n      mathematicsGradeInGCEOL\n      professionalQualification\n      employmentStatus\n      jobTitle\n      yearsOfExperience\n      employerName\n      employerAddress\n      otherDetails\n    }\n  }\n`;\nconst GET_APPLIER_QUERY = gql`\n  query getApplier {\n    applier @client {\n      name\n      email\n    }\n  }\n`;\n\nconst resetApplicationData = client => {\n  client.writeQuery({\n    query: GET_APPLIER_QUERY,\n    data: {\n      applier: {\n        __typename: 'Applier',\n        name: '',\n        email: ''\n      }\n    }\n  });\n  client.writeQuery({\n    query: GET_APPLICATION_PROFILE_QUERY,\n    data: {\n      applicationProfile: {\n        __typename: 'ProfileData',\n        birthDate: null,\n        birthPlace: '',\n        residence: '',\n        phoneNumber: '',\n        nationality: '',\n        nicNumber: '',\n        nicDateOfIssue: null,\n        nicPlaceOfIssue: '',\n        highestAcademicQualification: '',\n        yearOfIssue: new Date().getFullYear(),\n        englishGradeInGCEOL: '',\n        mathematicsGradeInGCEOL: '',\n        professionalQualification: '',\n        employmentStatus: 'JobSeeker',\n        jobTitle: '',\n        yearsOfExperience: 0,\n        employerName: '',\n        employerAddress: '',\n        otherDetails: null\n      }\n    }\n  });\n};\n\nexport default function ApplicationStepper(props) {\n  const classes = makeStyles(theme => createStyles({\n    root: {\n      width: '100%'\n    },\n    btnBar: {\n      display: 'flex',\n      padding: '10px 0px',\n      borderTop: '1px solid #DFDFDF'\n    },\n    btnLeft: {\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'flex-start'\n    },\n    btnRight: {\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'flex-end'\n    }\n  }))();\n  const {\n    0: alertOptions,\n    1: setAlertOptions\n  } = useState({\n    open: false,\n    level: 'info',\n    message: ''\n  });\n  const {\n    0: sending,\n    1: setSending\n  } = useState(false);\n  const {\n    currentUser\n  } = useAuth();\n  const client = useApolloClient();\n  const {\n    applicationProfile\n  } = client.readQuery({\n    query: GET_APPLICATION_PROFILE_QUERY\n  });\n  const {\n    applier\n  } = client.readQuery({\n    query: GET_APPLIER_QUERY\n  });\n  const steps = getSteps(!!currentUser);\n  const {\n    0: step,\n    1: setStep\n  } = useState('ConfirmAccount');\n  const activeStep = step === 'ApplicationConfirmation' ? currentUser ? 3 : 4 : steps.filter(s => s.step === step)[0].id;\n\n  const idBody = data => {\n    return `\n      <div>\n        <p>Dear ${data.name}, your application is being processed; you will have a response as soon as possible. See details below:</p>\n\n        <h3>Name and Email</h3>\n        <p><strong>Name</strong><br/>${data.name}</p>\n        <p><strong>Email</strong><br/>${data.email}</p>\n        <br />\n        <br />\n      </div>\n    `;\n  };\n\n  const sessionBody = () => {\n    return `\n      <div>\n        <h3>Session details</h3>\n        <p><strong>Department</strong><br/>${props.departmentTitle}</p>\n        <p><strong>Program</strong><br/>${props.programTitle}</p>\n        <p><strong>Plan</strong><br/>${props.planTitle}</p>\n        <p><strong>Training</strong><br/>${props.trainingTitle}</p>\n        <p><strong>Session</strong><br/>${props.session.title}</p>\n        <p><strong>Start date</strong><br/>${props.session.startDate ? new Date(props.session.startDate).toLocaleDateString() : 'Not specified'}</p>\n        <p><strong>Duration</strong><br/>${props.planDuration}</p>\n        <br />\n        <br />\n      </div>\n    `;\n  };\n\n  const profileBody = profile => {\n    return `\n      <div>\n        <h3>Profile details</h3>\n        <p><strong>Birthdate</strong><br/>${new Date(profile.birthDate).toLocaleDateString()}</p>\n        <p><strong>Birth place</strong><br/>${profile.birthPlace}</p>\n        <p><strong>Residence</strong><br/>${profile.residence}</p>\n        <p><strong>Phone number</strong><br/>${profile.phoneNumber}</p>\n        <p><strong>Nationality</strong><br/>${profile.nationality}</p>\n        <p><strong>ID Card number</strong><br/>${profile.nicNumber || '(missing)'}</p>\n        <p><strong>Date of issue</strong><br/>${profile.nicDateOfIssue ? new Date(profile.birthDate).toLocaleDateString() : '(missing)'}</p>\n        <p><strong>Place of issue</strong><br/>${profile.nicPlaceOfIssue || '(missing)'}</p>\n        <p><strong>Highest academic qualification</strong><br/>${profile.highestAcademicQualification || '(missing)'}</p>\n        <p><strong>Year of issue</strong><br/>${profile.yearOfIssue || '(missing)'}</p>\n        <p><strong>English grade in GCEOL</strong><br/>${profile.englishGradeInGCEOL || '(missing)'}</p>\n        <p><strong>Mathematic grade in GCEOL</strong><br/>${profile.mathematicsGradeInGCEOL || '(missing)'}</p>\n        <p><strong>Professional qualification</strong><br/>${profile.professionalQualification || '(missing)'}</p>\n        <p><strong>Employment status</strong><br/>${profile.employmentStatus || '(missing)'}</p>\n        <p><strong>Job title</strong><br/>${profile.jobTitle || '(missing)'}</p>\n        <p><strong>Years of experience</strong><br/>${profile.yearsOfExperience || '(missing)'}</p>\n        <p><strong>Employer name</strong><br/>${profile.employerName || '(missing)'}</p>\n        <p><strong>Employer address</strong><br/>${profile.employerAddress || '(missing)'}</p>\n        <p><strong>Other details</strong><br/>${profile.otherDetails || '(missing)'}</p>\n        <br />\n        <br />\n      </div>\n    `;\n  };\n\n  const goToStep = nextStep => setStep(nextStep);\n\n  const handleBack = () => {\n    switch (step) {\n      case 'ConfirmAccount':\n        return;\n\n      case 'FillApplicationForm':\n        return goToStep('ConfirmAccount');\n\n      case 'ReviewProfileData':\n        if (currentUser) return goToStep('ConfirmAccount');else return goToStep('FillApplicationForm');\n\n      case 'ReviewTrainingSession':\n        return goToStep('ReviewProfileData');\n    }\n  };\n\n  function getSteps(loggedIn) {\n    const steps = [];\n    let index = 0;\n    steps.push({\n      step: 'ConfirmAccount',\n      caption: 'Confirm your account',\n      id: index\n    });\n    index += 1;\n\n    if (!loggedIn) {\n      steps.push({\n        step: 'FillApplicationForm',\n        caption: 'Fill application form',\n        id: index\n      });\n      index += 1;\n    }\n\n    steps.push({\n      step: 'ReviewProfileData',\n      caption: 'Review your profile',\n      id: index\n    });\n    index += 1;\n    steps.push({\n      step: 'ReviewTrainingSession',\n      caption: 'Review training session',\n      id: index\n    });\n    return steps;\n  }\n\n  function ConfirmAccountStep() {\n    const classes = makeStyles(theme => createStyles({\n      root: {\n        marginBottom: 40,\n        paddingTop: 30,\n        paddingBottom: 15,\n        textAlign: 'center'\n      },\n      hasAccount: {},\n      noAccount: {\n        marginBottom: 30\n      }\n    }))();\n    return __jsx(Container, {\n      maxWidth: 500\n    }, __jsx(\"div\", {\n      style: {\n        padding: 10,\n        textAlign: 'center'\n      }\n    }, __jsx(Typography, {\n      variant: \"h5\"\n    }, \"Confirm your account\")), __jsx(\"div\", {\n      className: classes.root\n    }, currentUser ? __jsx(\"div\", null, __jsx(\"div\", null, \"You are applying as\"), __jsx(\"div\", null, __jsx(Typography, {\n      variant: \"h4\",\n      color: \"secondary\"\n    }, currentUser.fullName)), __jsx(\"div\", {\n      style: {\n        fontSize: '10pt',\n        color: '#808080',\n        marginBottom: 10\n      }\n    }, \"(\", currentUser.email, \")\"), __jsx(\"div\", null, __jsx(Button, {\n      size: \"large\",\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: () => goToStep('ReviewProfileData')\n    }, \"Review your profile\")), __jsx(Container, {\n      maxWidth: 300\n    }, __jsx(\"div\", {\n      style: {\n        fontSize: '9pt',\n        color: '#808080',\n        textAlign: 'center',\n        paddingTop: 10\n      }\n    }, \"If you want to use a different account, sign out first, then sign in with the right account.\"))) : __jsx(\"div\", null, __jsx(\"div\", {\n      className: classes.noAccount\n    }, __jsx(\"div\", {\n      style: {\n        fontWeight: 'bold',\n        marginBottom: 15\n      }\n    }, \"Don't have an account yet ?\"), __jsx(\"div\", null, __jsx(ApplierForm, {\n      data: applier,\n      onSubmit: data => {\n        client.writeQuery({\n          query: GET_APPLIER_QUERY,\n          data: {\n            applier: _objectSpread({\n              __typename: 'Applier'\n            }, data)\n          }\n        });\n        goToStep('FillApplicationForm');\n      }\n    })), __jsx(Container, {\n      maxWidth: 300\n    }, __jsx(\"div\", {\n      style: {\n        fontSize: '9pt',\n        color: '#808080',\n        textAlign: 'center',\n        paddingTop: 10\n      }\n    }, \"If your application is successfull, those information will be used to create your account.\"))), __jsx(\"div\", {\n      className: classes.hasAccount\n    }, \"Already have an account ? \\xA0\", __jsx(Link, {\n      href: {\n        pathname: '/signIn',\n        query: {\n          backTo: `/application?tsId=${props.session.id}`\n        }\n      }\n    }, __jsx(\"a\", {\n      style: {\n        textDecoration: 'none',\n        color: 'green'\n      }\n    }, \"Sign in\"))))));\n  }\n\n  function FillApplicationFormStep(props) {\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        padding: 10,\n        textAlign: 'center'\n      }\n    }, __jsx(Typography, {\n      variant: \"h5\"\n    }, \"Application form\")), __jsx(Container, {\n      maxWidth: 600\n    }, __jsx(ProfileForm, {\n      profile: applicationProfile,\n      submitText: \"Save and Review your data\",\n      onSubmit: data => props.onSubmit(data)\n    })), __jsx(\"br\", null)));\n  }\n\n  function ReviewProfileDataStep() {\n    if (currentUser && !props.profile) return __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: 50\n      }\n    }, \"You don't have a profile yet. Please \", __jsx(Link, {\n      href: \"/myProfile\"\n    }, __jsx(\"a\", null, \"create your profile\")), \" and retry to apply.\");\n    return __jsx(\"div\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        padding: 10,\n        textAlign: 'center'\n      }\n    }, __jsx(Typography, {\n      variant: \"h5\"\n    }, \"Review your Profile\")), currentUser ? __jsx(\"div\", null, __jsx(\"div\", {\n      style: {\n        fontSize: '9pt',\n        color: '#808080',\n        margin: '10px 0px'\n      }\n    }, \"If your profile is not up to date, please update it first then try to apply again.\"), __jsx(ProfileView, {\n      profile: currentUser.profile\n    })) : __jsx(\"div\", null, __jsx(ProfileView, {\n      profile: applicationProfile\n    })), __jsx(\"br\", null), __jsx(\"div\", null, (currentUser && currentUser.profile || !currentUser) && __jsx(Button, {\n      size: \"large\",\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: () => goToStep('ReviewTrainingSession')\n    }, \"Review Training Session Details\")), __jsx(\"br\", null));\n  }\n\n  function ReviewTrainingSessionStep() {\n    const classes = makeStyles(theme => createStyles({\n      root: {\n        marginBottom: 40,\n        textAlign: 'center'\n      }\n    }))();\n    if (currentUser && !props.profile) return __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: 50\n      }\n    }, \"You don't have a profile yet. Please \", __jsx(Link, {\n      href: \"/myProfile\"\n    }, __jsx(\"a\", null, \"create your profile\")), \" and retry to apply.\");\n    return __jsx(Container, {\n      maxWidth: 600\n    }, __jsx(\"div\", {\n      style: {\n        padding: 10,\n        textAlign: 'center'\n      }\n    }, __jsx(Typography, {\n      variant: \"h5\"\n    }, \"Review Training Session Details\")), __jsx(\"div\", {\n      className: classes.root\n    }, __jsx(\"div\", null, __jsx(Paper, null, __jsx(\"div\", {\n      style: {\n        padding: 10\n      }\n    }, __jsx(Table, {\n      size: \"small\",\n      style: {\n        border: '1px solid #DFDFDF'\n      }\n    }, __jsx(TableBody, null, __jsx(TableRow, {\n      key: \"dep\"\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      style: {\n        color: '#808080'\n      }\n    }, \"Department\"), __jsx(TableCell, {\n      align: \"right\"\n    }, props.departmentTitle)), __jsx(TableRow, {\n      key: \"program\"\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      style: {\n        color: '#808080'\n      }\n    }, \"Program\"), __jsx(TableCell, {\n      align: \"right\"\n    }, props.programTitle)), __jsx(TableRow, {\n      key: \"plan\"\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      style: {\n        color: '#808080'\n      }\n    }, \"Plan\"), __jsx(TableCell, {\n      align: \"right\"\n    }, props.planTitle)), __jsx(TableRow, {\n      key: \"training\"\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      style: {\n        color: '#808080'\n      }\n    }, \"Training\"), __jsx(TableCell, {\n      align: \"right\"\n    }, props.trainingTitle)), __jsx(TableRow, {\n      key: \"session\"\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      style: {\n        color: '#808080'\n      }\n    }, \"Session\"), __jsx(TableCell, {\n      align: \"right\"\n    }, props.session.title)), __jsx(TableRow, {\n      key: \"sdate\"\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      style: {\n        color: '#808080'\n      }\n    }, \"Start date\"), __jsx(TableCell, {\n      align: \"right\"\n    }, props.session.startDate || 'Not specified')), __jsx(TableRow, {\n      key: \"duration\"\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      style: {\n        color: '#808080'\n      }\n    }, \"Duration\"), __jsx(TableCell, {\n      align: \"right\"\n    }, props.planDuration))))), props.session.fees.length > 0 ? __jsx(\"div\", {\n      style: {\n        padding: 10\n      }\n    }, __jsx(\"div\", {\n      style: {\n        marginBottom: 5,\n        color: '#808080'\n      }\n    }, \"Fees\"), __jsx(Table, {\n      size: \"small\",\n      style: {\n        border: '1px solid #DFDFDF'\n      }\n    }, __jsx(TableHead, null, __jsx(TableRow, {\n      style: {\n        backgroundColor: '#DFDFDF'\n      }\n    }, __jsx(TableCell, null, \"Description\"), __jsx(TableCell, null, \"Type\"), __jsx(TableCell, {\n      align: \"right\"\n    }, \"Amount\"))), __jsx(TableBody, null, props.session.fees.map(f => __jsx(TableRow, {\n      key: f.id\n    }, __jsx(TableCell, null, f.description, \" \", f.optional && __jsx(\"span\", {\n      style: {\n        color: '#808080'\n      }\n    }, \"(Optional)\")), __jsx(TableCell, null, f.feeType), __jsx(TableCell, {\n      align: \"right\"\n    }, f.promotionalAmount > 0 ? __jsx(\"div\", null, __jsx(\"span\", {\n      style: {\n        textDecoration: 'line-through'\n      }\n    }, currency(f.amount)), \" \\xA0\", __jsx(\"span\", {\n      style: {\n        color: 'orange'\n      }\n    }, currency(f.promotionalAmount))) : __jsx(\"span\", null, currency(f.amount))))))), __jsx(Container, {\n      maxWidth: 400\n    }, __jsx(\"div\", {\n      style: {\n        fontSize: '9pt',\n        color: '#808080',\n        textAlign: 'center',\n        paddingTop: 10\n      }\n    }, __jsx(\"strong\", null, \"Note: \"), \" These fees are the training fees at the time the session was created, they might be different from the current training fees.\"))) : __jsx(\"div\", {\n      style: {\n        padding: 20\n      }\n    }, \"No fees\")), __jsx(\"div\", null, __jsx(Button, {\n      size: \"large\",\n      variant: \"contained\",\n      color: \"secondary\",\n      style: {\n        marginTop: 15\n      },\n      disabled: sending,\n      onClick: async () => {\n        let messageBody = currentUser ? idBody({\n          name: currentUser.fullName,\n          email: currentUser.email\n        }) : idBody(applier);\n        messageBody += sessionBody();\n        if (currentUser) messageBody += '<p><h3>Profile details</h3> (Existing user)</p>';else messageBody += profileBody(applicationProfile);\n\n        try {\n          setSending(true);\n          await sendMail({\n            subject: `Application form (${currentUser ? currentUser.fullName : applier.name})`,\n            body: messageBody,\n            to: applicationReceiver\n          });\n          goToStep('ApplicationConfirmation');\n          resetApplicationData(client);\n        } catch (ex) {\n          let errorMessage = ex.message;\n          if (ex.response) errorMessage = _JSON$stringify(ex.response.data.err);\n          setAlertOptions({\n            open: true,\n            level: 'error',\n            message: `Could not send email: ${errorMessage}`\n          });\n        } finally {\n          setSending(false);\n\n          try {\n            // send an email to the applier. If an error occured, do nothing.\n            await sendMail({\n              subject: `Application form received (${currentUser ? currentUser.fullName : applier.name})`,\n              body: messageBody,\n              to: applier.email\n            });\n          } catch (ex) {\n            /* Do nothing */\n          }\n        }\n      }\n    }, sending ? __jsx(CircularProgress, null) : 'Apply')))));\n  }\n\n  function ApplicationConfirmationStep() {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        margin: '50px 0px',\n        fontSize: '10pt',\n        color: '#808080'\n      }\n    }, __jsx(\"img\", {\n      src: \"/images/success.png\",\n      width: \"100\",\n      height: \"100\"\n    }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"div\", null, \"Your application has been received and is being processed. We will contact you shortly.\"));\n  }\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Paper, {\n    style: {\n      padding: 5\n    }\n  }, __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    alternativeLabel: true\n  }, steps.map(s => __jsx(Step, {\n    key: s.id\n  }, __jsx(StepLabel, null, s.caption))))), __jsx(Hidden, {\n    mdUp: true\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, step !== 'ApplicationConfirmation' ? __jsx(\"span\", null, \"Step \", activeStep + 1, \" / \", steps.length) : __jsx(\"span\", null, \"Done\")))), __jsx(\"div\", {\n    style: {\n      minHeight: 250\n    }\n  }, step === 'ConfirmAccount' && __jsx(ConfirmAccountStep, null), step === 'FillApplicationForm' && __jsx(FillApplicationFormStep, {\n    onSubmit: data => {\n      goToStep('ReviewProfileData');\n      client.writeQuery({\n        query: GET_APPLICATION_PROFILE_QUERY,\n        data: {\n          applicationProfile: _objectSpread({\n            __typename: 'ProfileData'\n          }, data)\n        }\n      });\n    }\n  }), step === 'ReviewProfileData' && __jsx(ReviewProfileDataStep, null), step === 'ReviewTrainingSession' && __jsx(ReviewTrainingSessionStep, null), step === 'ApplicationConfirmation' && __jsx(ApplicationConfirmationStep, null)), __jsx(\"div\", null, step !== 'ApplicationConfirmation' && __jsx(\"div\", {\n    className: classes.btnBar\n  }, __jsx(\"div\", {\n    className: classes.btnLeft\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"default\",\n    disabled: activeStep === 0,\n    onClick: handleBack\n  }, \"Back\")), __jsx(\"div\", {\n    className: classes.btnRight\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"default\",\n    onClick: () => {\n      resetApplicationData(client);\n      props.handleCancel();\n    }\n  }, \"Cancel\")))), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: () => setAlertOptions({\n      open: false,\n      level: alertOptions.level,\n      message: alertOptions.message\n    })\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}