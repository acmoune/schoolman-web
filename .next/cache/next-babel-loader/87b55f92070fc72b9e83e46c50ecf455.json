{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getMyTrainings($accountId: ID!) {\\n    enrollments(accountId: $accountId) {\\n      enrollmentId\\n      sessionTitle\\n      trainingTitle\\n      planTitle\\n      programTitle\\n      departmentTitle\\n      startDate\\n      duration\\n      sessionStatus\\n      bills {\\n        billId\\n        feeType\\n        description\\n        amount\\n        payments { paymentId amount date }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport MainLayout from '../layouts/MainLayout';\nimport { gql } from 'apollo-boost';\nimport Container from '../components/Container';\nimport EnrollmentItem from '../components/EnrollmentItem';\nimport { Typography, Button } from '@material-ui/core';\nimport Enrollment from '../components/Enrollment';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nvar GET_MY_TRAININGS_QUERY = gql(_templateObject());\n\nfunction ListView(_ref) {\n  var enrollments = _ref.enrollments,\n      _onSelect = _ref.onSelect;\n  return __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    style: {\n      marginBottom: 10\n    }\n  }, \"My Trainings\"), enrollments.map(function (e) {\n    return __jsx(EnrollmentItem, {\n      enrollment: e,\n      onSelect: function onSelect() {\n        return _onSelect(e);\n      }\n    });\n  }));\n}\n\nfunction ItemView(_ref2) {\n  var enrollment = _ref2.enrollment,\n      onBack = _ref2.onBack;\n  var totalBills = enrollment.bills.map(function (b) {\n    return b.amount;\n  }).reduce(function (s, i) {\n    return s + i;\n  }, 0);\n  var totalPayments = enrollment.bills.flatMap(function (b) {\n    return b.payments.map(function (p) {\n      return p.amount;\n    });\n  }).reduce(function (s, i) {\n    return s + i;\n  }, 0);\n  var isOwingMoney = totalPayments < totalBills;\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      marginTop: 15,\n      marginBottom: 10,\n      display: 'flex',\n      alignItems: 'center'\n    }\n  }, __jsx(\"div\", null, __jsx(Button, {\n    onClick: function onClick() {\n      return onBack();\n    },\n    size: \"small\",\n    variant: \"text\"\n  }, \"Back to list\")), __jsx(\"div\", {\n    style: {\n      flexGrow: 1,\n      fontSize: '8pt',\n      color: '#808080',\n      textAlign: 'right',\n      paddingRight: 10\n    }\n  }, isOwingMoney || enrollment.sessionStatus !== 'Finished' ? 'You will be able to print your certificate when the training will be completed and if you do not owe money' : ''), __jsx(\"div\", null, __jsx(Button, {\n    onClick: function onClick() {\n      return onBack();\n    },\n    size: \"small\",\n    disabled: isOwingMoney || enrollment.sessionStatus !== 'Finished',\n    variant: \"text\",\n    color: \"secondary\"\n  }, \"Print Certificate Of Completion\"))), __jsx(Enrollment, {\n    enrollment: enrollment\n  }));\n}\n\nfunction MyTrainingsPage(_ref3) {\n  var enrollments = _ref3.enrollments;\n\n  var _useState = useState(null),\n      selectedEnrollment = _useState[0],\n      selectEnrollment = _useState[1];\n\n  return __jsx(MainLayout, {\n    title: \"My Trainings - IMIT\"\n  }, __jsx(Container, null, selectedEnrollment ? __jsx(ItemView, {\n    enrollment: selectedEnrollment,\n    onBack: function onBack() {\n      return selectEnrollment(null);\n    }\n  }) : __jsx(ListView, {\n    enrollments: enrollments,\n    onSelect: function onSelect(item) {\n      return selectEnrollment(item);\n    }\n  })));\n}\n\nMyTrainingsPage.getInitialProps = function _callee(_ref4) {\n  var apolloClient, token, currentUser, _ref5, enrollments;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          apolloClient = _ref4.apolloClient, token = _ref4.token, currentUser = _ref4.currentUser;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_MY_TRAININGS_QUERY,\n            variables: {\n              accountId: currentUser.id\n            },\n            context: {\n              headers: {\n                'schoolman_token': token\n              }\n            }\n          }));\n\n        case 3:\n          _ref5 = _context.sent;\n          enrollments = _ref5.data.enrollments;\n          return _context.abrupt(\"return\", {\n            enrollments: enrollments,\n            authRequired: true\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withApollo(withAuth(MyTrainingsPage));","map":{"version":3,"sources":["/data/apps/school-manager-client/pages/myTrainings.tsx"],"names":["React","useState","MainLayout","gql","Container","EnrollmentItem","Typography","Button","Enrollment","withApollo","withAuth","GET_MY_TRAININGS_QUERY","ListView","enrollments","onSelect","marginTop","marginBottom","map","e","ItemView","enrollment","onBack","totalBills","bills","b","amount","reduce","s","i","totalPayments","flatMap","payments","p","isOwingMoney","display","alignItems","flexGrow","fontSize","color","textAlign","paddingRight","sessionStatus","MyTrainingsPage","selectedEnrollment","selectEnrollment","item","getInitialProps","apolloClient","token","currentUser","query","variables","accountId","id","context","headers","data","authRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport { gql } from 'apollo-boost'\nimport IEnrollment from '../server/src/models/accounts/Enrollment'\nimport Container from '../components/Container'\nimport EnrollmentItem from '../components/EnrollmentItem'\nimport { Typography, Button } from '@material-ui/core'\nimport Enrollment from '../components/Enrollment'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\nconst GET_MY_TRAININGS_QUERY = gql`\n  query getMyTrainings($accountId: ID!) {\n    enrollments(accountId: $accountId) {\n      enrollmentId\n      sessionTitle\n      trainingTitle\n      planTitle\n      programTitle\n      departmentTitle\n      startDate\n      duration\n      sessionStatus\n      bills {\n        billId\n        feeType\n        description\n        amount\n        payments { paymentId amount date }\n      }\n    }\n  }\n`\n\nfunction ListView({ enrollments, onSelect }: { enrollments: IEnrollment[], onSelect: (item: IEnrollment) => void }) {\n  return (\n    <div style={{ marginTop: 15 }}>\n      <Typography variant=\"h5\" color=\"textSecondary\" style={{ marginBottom: 10 }}>My Trainings</Typography>\n\n      {enrollments.map(e => <EnrollmentItem enrollment={e} onSelect={() => onSelect(e)} />)}\n    </div>\n  )\n}\n\nfunction ItemView({ enrollment, onBack }: { enrollment: IEnrollment, onBack: () => void }) {\n  const totalBills = enrollment.bills.map(b => b.amount).reduce((s, i) => s + i, 0)\n  const totalPayments = enrollment.bills.flatMap(b => b.payments.map(p => p.amount)).reduce((s, i) => s + i, 0)\n  const isOwingMoney = totalPayments < totalBills\n\n  return (\n    <div>\n      <div style={{ marginTop: 15, marginBottom: 10, display: 'flex', alignItems: 'center' }}>\n        <div>\n          <Button onClick={() => onBack()} size=\"small\" variant=\"text\">Back to list</Button>\n        </div>\n\n        <div style={{ flexGrow: 1, fontSize: '8pt', color: '#808080', textAlign: 'right', paddingRight: 10 }}>\n          {(isOwingMoney || enrollment.sessionStatus !== 'Finished') ? \n            'You will be able to print your certificate when the training will be completed and if you do not owe money' : \n            ''\n          }\n        </div>\n        \n        <div>\n          <Button \n            onClick={() => onBack()} \n            size=\"small\" \n            disabled={isOwingMoney || enrollment.sessionStatus !== 'Finished'}\n            variant=\"text\"\n            color=\"secondary\"\n          >\n            Print Certificate Of Completion\n          </Button>\n        </div>\n      </div>\n\n      <Enrollment enrollment={enrollment} />\n    </div>\n  )\n}\n\nfunction MyTrainingsPage({ enrollments }: { enrollments: IEnrollment[] }) {\n  const [selectedEnrollment, selectEnrollment] = useState<IEnrollment | null>(null)\n\n  return (\n    <MainLayout title=\"My Trainings - IMIT\">\n      <Container>\n        {selectedEnrollment ? \n          <ItemView enrollment={selectedEnrollment} onBack={() => selectEnrollment(null)} /> : \n          <ListView enrollments={enrollments} onSelect={(item: IEnrollment) => selectEnrollment(item)} />\n        }\n      </Container>\n    </MainLayout>\n  )\n}\n\nMyTrainingsPage.getInitialProps = async ({ apolloClient, token, currentUser }: any) => {\n  const { data: { enrollments }} = await apolloClient.query({\n    query: GET_MY_TRAININGS_QUERY,\n    variables: { accountId: currentUser.id },\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ enrollments, authRequired: true })\n}\n\nexport default withApollo(withAuth(MyTrainingsPage))\n"]},"metadata":{},"sourceType":"module"}