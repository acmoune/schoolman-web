{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Router from 'next/router';\nimport ApplicationStepper from '../components/ApplicationStepper';\nimport { gql } from 'apollo-boost';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nconst GET_SESSION_QUERY = gql`\n  query getTrainingSession($trainingSessionId: ID!) {\n    trainingSession(trainingSessionId: $trainingSessionId) {\n      id\n      title\n      startDate\n      status\n      fees {id description amount feeType optional}\n      plan {\n        id\n        title\n        duration\n        training {\n          id\n          title\n          program {\n            id\n            title\n            department { id title }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ApplicationPage({\n  profile,\n  tSession\n}) {\n  const handleCancel = () => Router.push({\n    pathname: '/training',\n    query: {\n      trainingId: tSession.plan.training.id\n    }\n  });\n\n  return __jsx(MainLayout, {\n    title: `Applying for ${tSession.plan.training.title} (${tSession.plan.title})`\n  }, __jsx(Container, null, __jsx(\"br\", null), __jsx(ApplicationStepper, {\n    handleCancel: handleCancel,\n    trainingTitle: tSession.plan.training.title,\n    programTitle: tSession.plan.training.program.title,\n    departmentTitle: tSession.plan.training.program.department.title,\n    planTitle: tSession.plan.title,\n    planDuration: tSession.plan.duration,\n    session: tSession,\n    profile: profile\n  })));\n}\n\nconst GET_PROFILE_QUERY = gql`\n  query getProfile($email: String!) {\n    account(email: $email) {\n      id\n      email\n      fullName\n      profile {\n        id birthDate birthPlace residence phoneNumber nationality\n        nicNumber nicDateOfIssue nicPlaceOfIssue\n        highestAcademicQualification yearOfIssue englishGradeInGCEOL mathematicsGradeInGCEOL\n        professionalQualification employmentStatus jobTitle yearsOfExperience employerName employerAddress\n        otherDetails\n      }\n    }\n  }\n`;\n\nApplicationPage.getInitialProps = async ({\n  query,\n  apolloClient,\n  token,\n  currentUser\n}) => {\n  var profile = null;\n\n  if (currentUser) {\n    const {\n      data: {\n        account\n      }\n    } = await apolloClient.query({\n      query: GET_PROFILE_QUERY,\n      variables: {\n        email: currentUser.email\n      },\n      context: {\n        headers: {\n          'schoolman_token': token\n        }\n      }\n    });\n    profile = account.profile;\n  }\n\n  const {\n    data: {\n      trainingSession\n    }\n  } = await apolloClient.query({\n    query: GET_SESSION_QUERY,\n    variables: {\n      trainingSessionId: query.tsId\n    },\n    context: {\n      headers: {\n        'schoolman_token': token\n      }\n    }\n  });\n  return {\n    profile,\n    tSession: trainingSession,\n    authReuired: true\n  };\n};\n\nexport default withApollo(withAuth(ApplicationPage));","map":null,"metadata":{},"sourceType":"module"}