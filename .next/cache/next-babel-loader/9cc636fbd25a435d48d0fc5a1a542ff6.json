{"ast":null,"code":"var _jsxFileName = \"/data/apps/school-manager-client/pages/application.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Router from 'next/router';\nimport ApplicationStepper from '../components/ApplicationStepper';\nimport { gql } from 'apollo-boost';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nconst GET_SESSION_QUERY = gql`\n  query getTrainingSession($trainingSessionId: ID!) {\n    trainingSession(trainingSessionId: $trainingSessionId) {\n      id\n      title\n      startDate\n      status\n      fees {id description amount feeType optional}\n      plan {\n        id\n        title\n        duration\n        training {\n          id\n          title\n          program {\n            id\n            title\n            department { id title }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ApplicationPage({\n  tSession\n}) {\n  const handleCancel = () => Router.push({\n    pathname: '/training',\n    query: {\n      trainingId: tSession.plan.training.id\n    }\n  });\n\n  return __jsx(MainLayout, {\n    title: \"IMIT\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), __jsx(ApplicationStepper, {\n    handleCancel: handleCancel,\n    trainingTitle: tSession.plan.training.title,\n    programTitle: tSession.plan.training.program.title,\n    departmentTitle: tSession.plan.training.program.department.title,\n    planTitle: tSession.plan.title,\n    planDuration: tSession.plan.duration,\n    session: tSession,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })));\n}\n\nApplicationPage.getInitialProps = async ({\n  query,\n  apolloClient,\n  token\n}) => {\n  const {\n    data: {\n      trainingSession\n    }\n  } = await apolloClient.query({\n    query: GET_SESSION_QUERY,\n    variables: {\n      trainingSessionId: query.tsId\n    },\n    context: {\n      headers: {\n        'schoolman_token': token\n      }\n    }\n  });\n  return {\n    tSession: trainingSession,\n    authReuired: true\n  };\n};\n\nexport default withApollo(withAuth(ApplicationPage));","map":{"version":3,"sources":["/data/apps/school-manager-client/pages/application.tsx"],"names":["React","Container","MainLayout","Router","ApplicationStepper","gql","withApollo","withAuth","GET_SESSION_QUERY","ApplicationPage","tSession","handleCancel","push","pathname","query","trainingId","plan","training","id","title","program","department","duration","getInitialProps","apolloClient","token","data","trainingSession","variables","trainingSessionId","tsId","context","headers","authReuired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;;;;;;CAA9B;;AA0BA,SAASI,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuE;AACrE,QAAMC,YAAY,GAAG,MAAMR,MAAM,CAACS,IAAP,CAAY;AAAEC,IAAAA,QAAQ,EAAE,WAAZ;AAAyBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAEL,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBC;AAArC;AAAhC,GAAZ,CAA3B;;AAEA,SACE,MAAC,UAAD;AAAY,IAAA,KAAK,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,kBAAD;AACE,IAAA,YAAY,EAAEP,YADhB;AAEE,IAAA,aAAa,EAAED,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBE,KAFxC;AAGE,IAAA,YAAY,EAAET,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBG,OAAvB,CAA+BD,KAH/C;AAIE,IAAA,eAAe,EAAET,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBG,OAAvB,CAA+BC,UAA/B,CAA0CF,KAJ7D;AAKE,IAAA,SAAS,EAAET,QAAQ,CAACM,IAAT,CAAcG,KAL3B;AAME,IAAA,YAAY,EAAET,QAAQ,CAACM,IAAT,CAAcM,QAN9B;AAOE,IAAA,OAAO,EAAEZ,QAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAgBD;;AAEDD,eAAe,CAACc,eAAhB,GAAkC,OAAO;AAAET,EAAAA,KAAF;AAASU,EAAAA,YAAT;AAAuBC,EAAAA;AAAvB,CAAP,KAA+C;AAC/E,QAAM;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,MAA+B,MAAMH,YAAY,CAACV,KAAb,CAAmB;AAC5DA,IAAAA,KAAK,EAAEN,iBADqD;AAE5DoB,IAAAA,SAAS,EAAE;AAAEC,MAAAA,iBAAiB,EAAEf,KAAK,CAACgB;AAA3B,KAFiD;AAG5DC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAE,2BAAmBP;AAArB;AAAX;AAHmD,GAAnB,CAA3C;AAMA,SAAQ;AAAEf,IAAAA,QAAQ,EAAEiB,eAAZ;AAA6BM,IAAAA,WAAW,EAAE;AAA1C,GAAR;AACD,CARD;;AAUA,eAAe3B,UAAU,CAACC,QAAQ,CAACE,eAAD,CAAT,CAAzB","sourcesContent":["import React from 'react'\nimport Container from '../components/Container'\nimport MainLayout from '../layouts/MainLayout'\nimport Router from 'next/router'\nimport ApplicationStepper from '../components/ApplicationStepper'\nimport { gql } from 'apollo-boost'\nimport ITrainingSession from '../server/src/models/catalog/TrainingSession'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\nconst GET_SESSION_QUERY = gql`\n  query getTrainingSession($trainingSessionId: ID!) {\n    trainingSession(trainingSessionId: $trainingSessionId) {\n      id\n      title\n      startDate\n      status\n      fees {id description amount feeType optional}\n      plan {\n        id\n        title\n        duration\n        training {\n          id\n          title\n          program {\n            id\n            title\n            department { id title }\n          }\n        }\n      }\n    }\n  }\n`\n\nfunction ApplicationPage({ tSession }: { tSession: ITrainingSession }) {\n  const handleCancel = () => Router.push({ pathname: '/training', query: { trainingId: tSession.plan.training.id }})\n  \n  return (\n    <MainLayout title=\"IMIT\">\n      <Container>\n        <br />\n        <ApplicationStepper \n          handleCancel={handleCancel}\n          trainingTitle={tSession.plan.training.title}\n          programTitle={tSession.plan.training.program.title}\n          departmentTitle={tSession.plan.training.program.department.title}\n          planTitle={tSession.plan.title}\n          planDuration={tSession.plan.duration}\n          session={tSession}\n        />\n      </Container>\n    </MainLayout>\n  )\n}\n\nApplicationPage.getInitialProps = async ({ query, apolloClient, token }: any) => {\n  const { data: { trainingSession }} = await apolloClient.query({\n    query: GET_SESSION_QUERY,\n    variables: { trainingSessionId: query.tsId },\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ tSession: trainingSession, authReuired: true })\n}\n\nexport default withApollo(withAuth(ApplicationPage))\n"]},"metadata":{},"sourceType":"module"}