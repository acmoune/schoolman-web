{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Alert from '../components/Alert';\nimport validator from 'validator';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Button } from '@material-ui/core';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Editor, EditorState, ContentState, convertToRaw, convertFromHTML, RichUtils } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\n\nfunction ProfileForm(_ref) {\n  var profile = _ref.profile,\n      submitText = _ref.submitText,\n      onSubmit = _ref.onSubmit;\n  var classes = makeStyles(function (theme) {\n    return createStyles({\n      fieldGroup: {\n        marginBottom: 25,\n        padding: 10\n      },\n      groupTitle: {\n        fontSize: '16pt',\n        color: '#808080',\n        paddingBottom: 5,\n        borderBottom: '1px solid #DFDFDF',\n        marginBottom: 15\n      },\n      field: {\n        marginBottom: 30\n      }\n    });\n  })();\n\n  var _useState = useState({\n    birthDateErrors: [],\n    birthPlaceErrors: [],\n    residenceErrors: [],\n    phoneNumberErrors: [],\n    nationalityErrors: []\n  }),\n      inputErrors = _useState[0],\n      setInputErrors = _useState[1];\n\n  var _useState2 = useState({\n    open: false,\n    level: 'info',\n    message: ''\n  }),\n      alertOptions = _useState2[0],\n      setAlertOptions = _useState2[1];\n\n  function contentFrom(content) {\n    if (true) {\n      var _convertFromHTML = convertFromHTML(content),\n          contentBlocks = _convertFromHTML.contentBlocks,\n          entityMap = _convertFromHTML.entityMap;\n\n      return ContentState.createFromBlockArray(contentBlocks, entityMap);\n    }\n\n    return ContentState.createFromText(content);\n  } // Fields state variables\n\n\n  var _useState3 = useState(profile && profile.birthDate ? new Date(profile.birthDate) : null),\n      birthDate = _useState3[0],\n      setBirthDate = _useState3[1];\n\n  var _useState4 = useState(profile && profile.birthPlace ? profile.birthPlace : ''),\n      birthPlace = _useState4[0],\n      setBirthPlace = _useState4[1];\n\n  var _useState5 = useState(profile && profile.residence ? profile.residence : ''),\n      residence = _useState5[0],\n      setResidence = _useState5[1];\n\n  var _useState6 = useState(profile && profile.phoneNumber ? profile.phoneNumber : ''),\n      phoneNumber = _useState6[0],\n      setPhoneNumber = _useState6[1];\n\n  var _useState7 = useState(profile && profile.nationality ? profile.nationality : ''),\n      nationality = _useState7[0],\n      setNationality = _useState7[1];\n\n  var _useState8 = useState(profile && profile.otherDetails ? EditorState.createWithContent(contentFrom(profile.otherDetails)) : EditorState.createEmpty()),\n      otherDetails = _useState8[0],\n      setOtherDetails = _useState8[1];\n\n  var validateData = function validateData() {\n    var birthDateErrors = [];\n    var birthPlaceErrors = [];\n    var residenceErrors = [];\n    var phoneNumberErrors = [];\n    var nationalityErrors = [];\n    if (!birthDate) birthDateErrors.push('Your birth day is required');\n    if (validator.isEmpty(birthPlace)) birthPlaceErrors.push('Your birth place is required');\n    if (validator.isEmpty(residence)) residenceErrors.push('Your residence is required');\n    if (validator.isEmpty(phoneNumber)) phoneNumberErrors.push('Your phone number is required');\n    if (validator.isEmpty(nationality)) nationalityErrors.push('Your nationality is required');\n    var isValid = birthDateErrors.length == 0 && birthPlaceErrors.length == 0 && residenceErrors.length == 0 && phoneNumberErrors.length == 0 && nationalityErrors.length == 0;\n    var errors = {\n      birthDateErrors: birthDateErrors,\n      birthPlaceErrors: birthPlaceErrors,\n      residenceErrors: residenceErrors,\n      phoneNumberErrors: phoneNumberErrors,\n      nationalityErrors: nationalityErrors\n    };\n    return {\n      isValid: isValid,\n      errors: errors\n    };\n  };\n\n  var submit = function submit(cb) {\n    var _validateData = validateData(),\n        isValid = _validateData.isValid,\n        errors = _validateData.errors;\n\n    setInputErrors(errors);\n    if (!isValid) return cb('Please enter valid inputs');\n    return cb('', {\n      birthDate: birthDate ? birthDate.toISOString() : null,\n      birthPlace: birthPlace,\n      residence: residence,\n      phoneNumber: phoneNumber,\n      nationality: nationality,\n      otherDetails: draftToHtml(convertToRaw(otherDetails.getCurrentContent()))\n    });\n  };\n\n  function onChange(command, editorState) {\n    var newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setOtherDetails(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Personal Information\"), __jsx(\"div\", null, __jsx(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils\n  }, __jsx(DatePicker, {\n    className: classes.field,\n    autoOk: true,\n    fullWidth: true,\n    format: \"MM/dd/yyyy\",\n    variant: \"inline\",\n    id: \"birthDate\",\n    label: \"Birthdate\",\n    value: birthDate,\n    onChange: setBirthDate,\n    error: inputErrors.birthDateErrors.length > 0,\n    helperText: inputErrors.birthDateErrors.join(', ')\n  })), __jsx(TextField, {\n    className: classes.field,\n    id: \"birthPlace\",\n    name: \"birthPlace\",\n    label: \"Birth place\",\n    fullWidth: true,\n    value: birthPlace,\n    onChange: function onChange(e) {\n      return setBirthPlace(e.target.value);\n    },\n    error: inputErrors.birthPlaceErrors.length > 0,\n    helperText: inputErrors.birthPlaceErrors.join(', ')\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"residence\",\n    name: \"residence\",\n    label: \"Residence\",\n    fullWidth: true,\n    value: residence,\n    onChange: function onChange(e) {\n      return setResidence(e.target.value);\n    },\n    error: inputErrors.residenceErrors.length > 0,\n    helperText: inputErrors.residenceErrors.join(', ')\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"phoneNumber\",\n    name: \"phoneNumber\",\n    label: \"Phone number\",\n    fullWidth: true,\n    value: phoneNumber,\n    onChange: function onChange(e) {\n      return setPhoneNumber(e.target.value);\n    },\n    error: inputErrors.phoneNumberErrors.length > 0,\n    helperText: inputErrors.phoneNumberErrors.join(', ')\n  }), __jsx(TextField, {\n    id: \"nationality\",\n    name: \"nationality\",\n    label: \"Nationality\",\n    fullWidth: true,\n    value: nationality,\n    onChange: function onChange(e) {\n      return setNationality(e.target.value);\n    },\n    error: inputErrors.nationalityErrors.length > 0,\n    helperText: inputErrors.nationalityErrors.join(', ')\n  }))), __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Other Details\"), __jsx(\"div\", {\n    style: {\n      fontSize: '9pt',\n      color: '#808080',\n      marginBottom: 10\n    }\n  }, \"Please provide additional details here, anything that is valuable for you. For example, if you already have records with Cisco, ACCA, CIPS, or whichever program you want to apply for, kindly provide references here.\"), __jsx(\"div\", {\n    style: {\n      border: '1px solid #DFDFDF',\n      padding: 5,\n      borderRadius: 5\n    }\n  }, true && __jsx(Editor, {\n    editorState: otherDetails,\n    onChange: function onChange(editorState) {\n      return setOtherDetails(editorState);\n    },\n    handleKeyCommand: onChange\n  }))), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: function onClick() {\n      return submit(function (errMessage, data) {\n        if (errMessage) return setAlertOptions({\n          open: true,\n          level: 'error',\n          message: errMessage\n        });\n        if (data) return onSubmit(data);\n        return;\n      });\n    }\n  }, \"\".concat(submitText || 'Save'))), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: function onClose() {\n      return setAlertOptions({\n        open: false,\n        level: alertOptions.level,\n        message: alertOptions.message\n      });\n    }\n  }));\n}\n\nexport default ProfileForm;","map":null,"metadata":{},"sourceType":"module"}