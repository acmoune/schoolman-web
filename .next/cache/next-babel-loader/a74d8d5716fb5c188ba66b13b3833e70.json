{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Alert from '../components/Alert';\nimport validator from 'validator';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button } from '@material-ui/core';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Editor, EditorState, ContentState, convertToRaw, convertFromHTML, RichUtils } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\n\nfunction ProfileForm({\n  profile,\n  submitText,\n  onSubmit\n}) {\n  const classes = makeStyles(theme => createStyles({\n    fieldGroup: {\n      marginBottom: 25,\n      padding: 10\n    },\n    groupTitle: {\n      fontSize: '12pt',\n      color: '#808080',\n      paddingBottom: 5,\n      borderBottom: '1px solid #DFDFDF',\n      fontWeight: 'bold',\n      marginBottom: 15\n    },\n    field: {\n      marginBottom: 30\n    }\n  }))();\n  const {\n    0: inputErrors,\n    1: setInputErrors\n  } = useState({\n    birthDateErrors: [],\n    birthPlaceErrors: [],\n    residenceErrors: [],\n    phoneNumberErrors: [],\n    nationalityErrors: []\n  });\n  const {\n    0: alertOptions,\n    1: setAlertOptions\n  } = useState({\n    open: false,\n    level: 'info',\n    message: ''\n  });\n\n  function contentFrom(content) {\n    if (false) {\n      const {\n        contentBlocks,\n        entityMap\n      } = convertFromHTML(content);\n      return ContentState.createFromBlockArray(contentBlocks, entityMap);\n    }\n\n    return ContentState.createFromText(content);\n  } // Fields state variables\n\n\n  const {\n    0: birthDate,\n    1: setBirthDate\n  } = useState(profile && profile.birthDate ? new Date(profile.birthDate) : null);\n  const {\n    0: birthPlace,\n    1: setBirthPlace\n  } = useState(profile && profile.birthPlace ? profile.birthPlace : '');\n  const {\n    0: residence,\n    1: setResidence\n  } = useState(profile && profile.residence ? profile.residence : '');\n  const {\n    0: phoneNumber,\n    1: setPhoneNumber\n  } = useState(profile && profile.phoneNumber ? profile.phoneNumber : '');\n  const {\n    0: nationality,\n    1: setNationality\n  } = useState(profile && profile.nationality ? profile.nationality : '');\n  const {\n    0: nicNumber,\n    1: setNicNumber\n  } = useState(profile && profile.nicNumber ? profile.nicNumber : '');\n  const {\n    0: nicDateOfIssue,\n    1: setNicDateOfIssue\n  } = useState(profile && profile.nicDateOfIssue ? new Date(profile.nicDateOfIssue) : null);\n  const {\n    0: nicPlaceOfIssue,\n    1: setNicPlaceOfIssue\n  } = useState(profile && profile.nicPlaceOfIssue ? profile.nicPlaceOfIssue : '');\n  const {\n    0: highestAcademicQualification,\n    1: setHighestAcademicQualification\n  } = useState(profile && profile.highestAcademicQualification ? profile.highestAcademicQualification : '');\n  const {\n    0: yearOfIssue,\n    1: setYearOfIssue\n  } = useState(profile && profile.yearOfIssue ? profile.yearOfIssue : new Date().getFullYear());\n  const {\n    0: englishGradeInGCEOL,\n    1: setEnglishGradeInGCEOL\n  } = useState(profile && profile.englishGradeInGCEOL ? profile.englishGradeInGCEOL : '');\n  const {\n    0: mathematicsGradeInGCEOL,\n    1: setMathematicsGradeInGCEOL\n  } = useState(profile && profile.mathematicsGradeInGCEOL ? profile.mathematicsGradeInGCEOL : '');\n  const {\n    0: professionalQualification,\n    1: setProfessionalQualification\n  } = useState(profile && profile.professionalQualification ? profile.professionalQualification : '');\n  const {\n    0: employmentStatus,\n    1: setEmploymentStatus\n  } = useState(profile && profile.employmentStatus ? profile.employmentStatus : 'JobSeeker');\n  const {\n    0: jobTitle,\n    1: setJobTitle\n  } = useState(profile && profile.jobTitle ? profile.jobTitle : '');\n  const {\n    0: yearsOfExperience,\n    1: setYearsOfExperience\n  } = useState(profile && profile.yearsOfExperience ? profile.yearsOfExperience : 0);\n  const {\n    0: employerName,\n    1: setEmployerName\n  } = useState(profile && profile.employerName ? profile.employerName : '');\n  const {\n    0: employerAddress,\n    1: setEmployerAddress\n  } = useState(profile && profile.employerAddress ? profile.employerAddress : '');\n  const {\n    0: otherDetails,\n    1: setOtherDetails\n  } = useState(profile && profile.otherDetails ? EditorState.createWithContent(contentFrom(profile.otherDetails)) : EditorState.createEmpty());\n\n  const validateData = () => {\n    const birthDateErrors = [];\n    const birthPlaceErrors = [];\n    const residenceErrors = [];\n    const phoneNumberErrors = [];\n    const nationalityErrors = [];\n    if (!birthDate) birthDateErrors.push('Your birth day is required');\n    if (validator.isEmpty(birthPlace)) birthPlaceErrors.push('Your birth place is required');\n    if (validator.isEmpty(residence)) residenceErrors.push('Your residence is required');\n    if (validator.isEmpty(phoneNumber)) phoneNumberErrors.push('Your phone number is required');\n    if (validator.isEmpty(nationality)) nationalityErrors.push('Your nationality is required');\n    const isValid = birthDateErrors.length == 0 && birthPlaceErrors.length == 0 && residenceErrors.length == 0 && phoneNumberErrors.length == 0 && nationalityErrors.length == 0;\n    const errors = {\n      birthDateErrors,\n      birthPlaceErrors,\n      residenceErrors,\n      phoneNumberErrors,\n      nationalityErrors\n    };\n    return {\n      isValid,\n      errors\n    };\n  };\n\n  const submit = cb => {\n    const {\n      isValid,\n      errors\n    } = validateData();\n    setInputErrors(errors);\n    if (!isValid) return cb('Please enter valid inputs');\n    return cb('', {\n      birthDate: birthDate ? birthDate.toISOString() : null,\n      birthPlace,\n      residence,\n      phoneNumber,\n      nationality,\n      nicNumber,\n      nicDateOfIssue: nicDateOfIssue ? nicDateOfIssue.toISOString() : null,\n      nicPlaceOfIssue,\n      highestAcademicQualification,\n      yearOfIssue,\n      englishGradeInGCEOL,\n      mathematicsGradeInGCEOL,\n      professionalQualification,\n      employmentStatus,\n      jobTitle,\n      yearsOfExperience,\n      employerName,\n      employerAddress,\n      otherDetails: draftToHtml(convertToRaw(otherDetails.getCurrentContent()))\n    });\n  };\n\n  function onChange(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setOtherDetails(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Personal Information\"), __jsx(\"div\", null, __jsx(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils\n  }, __jsx(DatePicker, {\n    className: classes.field,\n    autoOk: true,\n    fullWidth: true,\n    format: \"MM/dd/yyyy\",\n    variant: \"inline\",\n    id: \"birthDate\",\n    label: \"Birthdate\",\n    value: birthDate,\n    onChange: setBirthDate,\n    error: inputErrors.birthDateErrors.length > 0,\n    helperText: inputErrors.birthDateErrors.join(', ')\n  })), __jsx(TextField, {\n    className: classes.field,\n    id: \"birthPlace\",\n    name: \"birthPlace\",\n    label: \"Birth place\",\n    fullWidth: true,\n    value: birthPlace,\n    onChange: e => setBirthPlace(e.target.value),\n    error: inputErrors.birthPlaceErrors.length > 0,\n    helperText: inputErrors.birthPlaceErrors.join(', ')\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"residence\",\n    name: \"residence\",\n    label: \"Residence\",\n    fullWidth: true,\n    value: residence,\n    onChange: e => setResidence(e.target.value),\n    error: inputErrors.residenceErrors.length > 0,\n    helperText: inputErrors.residenceErrors.join(', ')\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"phoneNumber\",\n    name: \"phoneNumber\",\n    label: \"Phone number\",\n    fullWidth: true,\n    value: phoneNumber,\n    onChange: e => setPhoneNumber(e.target.value),\n    error: inputErrors.phoneNumberErrors.length > 0,\n    helperText: inputErrors.phoneNumberErrors.join(', ')\n  }), __jsx(TextField, {\n    id: \"nationality\",\n    name: \"nationality\",\n    label: \"Nationality\",\n    fullWidth: true,\n    value: nationality,\n    onChange: e => setNationality(e.target.value),\n    error: inputErrors.nationalityErrors.length > 0,\n    helperText: inputErrors.nationalityErrors.join(', ')\n  }))), __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Identification\"), __jsx(\"div\", null, __jsx(TextField, {\n    className: classes.field,\n    id: \"nicNumber\",\n    name: \"nicNumber\",\n    label: \"Id Card number\",\n    fullWidth: true,\n    value: nicNumber,\n    onChange: e => setNicNumber(e.target.value)\n  }), __jsx(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils\n  }, __jsx(DatePicker, {\n    className: classes.field,\n    autoOk: true,\n    clearable: true,\n    format: \"MM/dd/yyyy\",\n    color: \"secondary\",\n    variant: \"inline\",\n    fullWidth: true,\n    id: \"nicDateOfIssue\",\n    label: \"Date of issue\",\n    value: nicDateOfIssue,\n    onChange: setNicDateOfIssue\n  })), __jsx(TextField, {\n    id: \"nicPlaceOfIssue\",\n    name: \"nicPlaceOfIssue\",\n    label: \"Place of issue\",\n    fullWidth: true,\n    value: nicPlaceOfIssue,\n    onChange: e => setNicPlaceOfIssue(e.target.value)\n  }))), __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Academic Details\"), __jsx(\"div\", null, __jsx(TextField, {\n    className: classes.field,\n    id: \"highestAcademicQualification\",\n    name: \"highestAcademicQualification\",\n    label: \"Highest academic qualification\",\n    fullWidth: true,\n    value: highestAcademicQualification,\n    onChange: e => setHighestAcademicQualification(e.target.value)\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"yearOfIssue\",\n    name: \"yearOfIssue\",\n    label: \"Year of issue\",\n    type: \"number\",\n    fullWidth: true,\n    value: yearOfIssue,\n    onChange: e => setYearOfIssue(_parseInt(e.target.value, 10))\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"englishGradeInGCEOL\",\n    name: \"englishGradeInGCEOL\",\n    label: \"English grade in GCEOL\",\n    fullWidth: true,\n    value: englishGradeInGCEOL,\n    onChange: e => setEnglishGradeInGCEOL(e.target.value)\n  }), __jsx(TextField, {\n    id: \"mathematicsGradeInGCEOL\",\n    name: \"mathematicsGradeInGCEOL\",\n    label: \"Mathematics grade in GCEOL\",\n    fullWidth: true,\n    value: mathematicsGradeInGCEOL,\n    onChange: e => setMathematicsGradeInGCEOL(e.target.value)\n  }))), __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Professional Details\"), __jsx(\"div\", null, __jsx(TextField, {\n    className: classes.field,\n    id: \"professionalQualification\",\n    name: \"professionalQualification\",\n    label: \"Professional qualification\",\n    fullWidth: true,\n    value: professionalQualification,\n    onChange: e => setProfessionalQualification(e.target.value)\n  }), __jsx(FormControl, {\n    component: \"fieldset\",\n    style: {\n      margin: '20px 0px'\n    }\n  }, __jsx(FormLabel, {\n    component: \"legend\",\n    style: {\n      fontSize: '9pt',\n      marginBottom: 10\n    }\n  }, \"Employment status\"), __jsx(RadioGroup, {\n    \"aria-label\": \"gender\",\n    name: \"employmentStatus\",\n    value: employmentStatus,\n    onChange: e => setEmploymentStatus(e.target.value)\n  }, __jsx(FormControlLabel, {\n    value: \"Employee\",\n    control: __jsx(Radio, null),\n    label: \"Employee\",\n    style: {\n      marginLeft: 5\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"SelfEmployed\",\n    control: __jsx(Radio, null),\n    label: \"Self employed\",\n    style: {\n      marginLeft: 5\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"JobSeeker\",\n    control: __jsx(Radio, null),\n    label: \"Job seeker\",\n    style: {\n      marginLeft: 5\n    }\n  }))), __jsx(TextField, {\n    className: classes.field,\n    id: \"jobTitle\",\n    name: \"jobTitle\",\n    label: \"Job Title\",\n    fullWidth: true,\n    value: jobTitle,\n    onChange: e => setJobTitle(e.target.value)\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"yearsOfExperience\",\n    name: \"yearsOfExperience\",\n    label: \"Years of experience\",\n    type: \"number\",\n    fullWidth: true,\n    value: yearsOfExperience,\n    onChange: e => setYearsOfExperience(_parseInt(e.target.value, 10))\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"employerName\",\n    name: \"employerName\",\n    label: \"Employer\",\n    fullWidth: true,\n    value: employerName,\n    onChange: e => setEmployerName(e.target.value)\n  }), __jsx(TextField, {\n    id: \"employerAddress\",\n    name: \"employerAddress\",\n    label: \"Employer Address\",\n    fullWidth: true,\n    value: employerAddress,\n    onChange: e => setEmployerAddress(e.target.value)\n  }))), __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Other Details\"), __jsx(\"div\", {\n    style: {\n      fontSize: '9pt',\n      color: '#808080',\n      marginBottom: 10\n    }\n  }, \"Please provide additional details here, anything that is valuable for you. For example, if you already have records with Cisco, ACCA, CIPS, or whichever program you want to apply for, kindly provide references here.\"), __jsx(\"div\", {\n    style: {\n      border: '1px solid #DFDFDF',\n      padding: 5,\n      borderRadius: 5\n    }\n  }, false && __jsx(Editor, {\n    editorState: otherDetails,\n    onChange: editorState => setOtherDetails(editorState),\n    handleKeyCommand: onChange\n  }))), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => submit((errMessage, data) => {\n      if (errMessage) return setAlertOptions({\n        open: true,\n        level: 'error',\n        message: errMessage\n      });\n      if (data) return onSubmit(data);\n      return;\n    })\n  }, `${submitText || 'Save'}`)), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: () => setAlertOptions({\n      open: false,\n      level: alertOptions.level,\n      message: alertOptions.message\n    })\n  }));\n}\n\nexport default ProfileForm;","map":null,"metadata":{},"sourceType":"module"}