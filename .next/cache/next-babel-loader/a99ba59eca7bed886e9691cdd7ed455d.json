{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { AuthProvider } from '../components/AuthContext';\nimport jwtDecode from 'jwt-decode';\nimport { gql } from 'apollo-boost';\nimport axios from 'axios';\nimport { getCookieFromBrowser, getCookieFromServer, removeCookie } from '../lib/cookie';\nimport { authCookieName, apiBaseUrl } from '../app.config';\nimport Router from 'next/router';\nconst GET_ACCOUNT_QUERY = gql`\n  query getProfile($email: String!) {\n    account(email: $email) {\n      id\n      email\n      fullName\n      profile {\n        id birthDate birthPlace residence phoneNumber nationality\n        nicNumber nicDateOfIssue nicPlaceOfIssue\n        highestAcademicQualification yearOfIssue englishGradeInGCEOL mathematicsGradeInGCEOL\n        professionalQualification employmentStatus jobTitle yearsOfExperience employerName employerAddress\n        otherDetails\n      }\n    }\n  }\n`;\nexport default function withAuth(PageComponent) {\n  const getToken = req => true ? getCookieFromServer(authCookieName, req) : getCookieFromBrowser(authCookieName);\n\n  function WithAuth(_ref) {\n    let {\n      currentUser\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"currentUser\"]);\n\n    return __jsx(AuthProvider, {\n      currentUser: currentUser\n    }, __jsx(PageComponent, pageProps));\n  }\n\n  WithAuth.getInitialProps = async ctx => {\n    const token = getToken(ctx.req);\n    let currentUser = undefined;\n    let tokenIsValid = false;\n\n    if (token) {\n      try {\n        await axios.post(`${apiBaseUrl}/validateToken`, {\n          token\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        tokenIsValid = true;\n      } catch (ex) {}\n\n      if (tokenIsValid) {\n        const {\n          data: {\n            account\n          }\n        } = await ctx.apolloClient.query({\n          query: GET_ACCOUNT_QUERY,\n          variables: {\n            email: jwtDecode(token).ema\n          },\n          context: {\n            headers: {\n              'schoolman_token': token\n            }\n          }\n        });\n        currentUser = account;\n      }\n    } // add token and currentUser to context, so they can be used in PageComponent.getInitialProps\n\n\n    ctx.token = token;\n    ctx.currentUser = currentUser;\n    let pageProps = {};\n    if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx);\n    const {\n      authRequired\n    } = pageProps;\n\n    if (authRequired && !currentUser) {\n      if (true) ctx.res.redirect('/signIn');else Router.push('/signIn');\n    }\n\n    if (!tokenIsValid && false) removeCookie(authCookieName);\n    return _objectSpread({\n      currentUser\n    }, pageProps);\n  };\n\n  return WithAuth;\n}","map":{"version":3,"sources":["/data/apps/school-manager-client/lib/with-auth.jsx"],"names":["React","AuthProvider","jwtDecode","gql","axios","getCookieFromBrowser","getCookieFromServer","removeCookie","authCookieName","apiBaseUrl","Router","GET_ACCOUNT_QUERY","withAuth","PageComponent","getToken","req","WithAuth","currentUser","pageProps","getInitialProps","ctx","token","undefined","tokenIsValid","post","headers","ex","data","account","apolloClient","query","variables","email","ema","context","authRequired","res","redirect","push"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,EAAoDC,YAApD,QAAwE,eAAxE;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,eAA3C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,iBAAiB,GAAGR,GAAI;;;;;;;;;;;;;;;CAA9B;AAiBA,eAAe,SAASS,QAAT,CAAkBC,aAAlB,EAAiC;AAE9C,QAAMC,QAAQ,GAAGC,GAAG,IAClB,OAAgCT,mBAAmB,CAACE,cAAD,EAAiBO,GAAjB,CAAnD,GAA2EV,oBAAoB,CAACG,cAAD,CADjG;;AAGA,WAASQ,QAAT,OAAiD;AAAA,QAA/B;AAAEC,MAAAA;AAAF,KAA+B;AAAA,QAAbC,SAAa;;AAC/C,WACE,MAAC,YAAD;AAAc,MAAA,WAAW,EAAED;AAA3B,OACE,MAAC,aAAD,EAAmBC,SAAnB,CADF,CADF;AAKD;;AAEDF,EAAAA,QAAQ,CAACG,eAAT,GAA2B,MAAMC,GAAN,IAAa;AACtC,UAAMC,KAAK,GAAGP,QAAQ,CAACM,GAAG,CAACL,GAAL,CAAtB;AACA,QAAIE,WAAW,GAAGK,SAAlB;AACA,QAAIC,YAAY,GAAG,KAAnB;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAI;AACF,cAAMjB,KAAK,CAACoB,IAAN,CAAY,GAAEf,UAAW,gBAAzB,EAA0C;AAAEY,UAAAA;AAAF,SAA1C,EAAqD;AAAEI,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB;AAAX,SAArD,CAAN;AACAF,QAAAA,YAAY,GAAG,IAAf;AACD,OAHD,CAGE,OAAOG,EAAP,EAAW,CAAE;;AAEf,UAAIH,YAAJ,EAAkB;AAChB,cAAM;AAAEI,UAAAA,IAAI,EAAE;AAAEC,YAAAA;AAAF;AAAR,YAAuB,MAAMR,GAAG,CAACS,YAAJ,CAAiBC,KAAjB,CAAuB;AACxDA,UAAAA,KAAK,EAAEnB,iBADiD;AAExDoB,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE9B,SAAS,CAACmB,KAAD,CAAT,CAAiBY;AAA1B,WAF6C;AAGxDC,UAAAA,OAAO,EAAE;AAAET,YAAAA,OAAO,EAAE;AAAE,iCAAmBJ;AAArB;AAAX;AAH+C,SAAvB,CAAnC;AAKAJ,QAAAA,WAAW,GAAGW,OAAd;AACD;AACF,KAnBqC,CAqBtC;;;AACAR,IAAAA,GAAG,CAACC,KAAJ,GAAYA,KAAZ;AACAD,IAAAA,GAAG,CAACH,WAAJ,GAAkBA,WAAlB;AAEA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIL,aAAa,CAACM,eAAlB,EAAmCD,SAAS,GAAG,MAAML,aAAa,CAACM,eAAd,CAA8BC,GAA9B,CAAlB;AAEnC,UAAM;AAAEe,MAAAA;AAAF,QAAmBjB,SAAzB;;AAEA,QAAIiB,YAAY,IAAI,CAAClB,WAArB,EAAkC;AAChC,gBAAmCG,GAAG,CAACgB,GAAJ,CAAQC,QAAR,CAAiB,SAAjB,EAAnC,KACK3B,MAAM,CAAC4B,IAAP,CAAY,SAAZ;AACN;;AAED,QAAI,CAACf,YAAD,SAAJ,EAAsDhB,YAAY,CAACC,cAAD,CAAZ;AAEtD;AAASS,MAAAA;AAAT,OAAyBC,SAAzB;AACD,GAtCD;;AAwCA,SAAOF,QAAP;AACD","sourcesContent":["import React from 'react'\nimport { AuthProvider } from '../components/AuthContext'\nimport jwtDecode from 'jwt-decode'\nimport { gql } from 'apollo-boost'\nimport axios from 'axios'\nimport { getCookieFromBrowser, getCookieFromServer, removeCookie } from '../lib/cookie'\nimport { authCookieName, apiBaseUrl } from '../app.config'\nimport Router from 'next/router'\n\nconst GET_ACCOUNT_QUERY = gql`\n  query getProfile($email: String!) {\n    account(email: $email) {\n      id\n      email\n      fullName\n      profile {\n        id birthDate birthPlace residence phoneNumber nationality\n        nicNumber nicDateOfIssue nicPlaceOfIssue\n        highestAcademicQualification yearOfIssue englishGradeInGCEOL mathematicsGradeInGCEOL\n        professionalQualification employmentStatus jobTitle yearsOfExperience employerName employerAddress\n        otherDetails\n      }\n    }\n  }\n`\n\nexport default function withAuth(PageComponent) {\n\n  const getToken = req => \n    typeof window === 'undefined' ? getCookieFromServer(authCookieName, req) : getCookieFromBrowser(authCookieName)\n\n  function WithAuth({ currentUser, ...pageProps }) {\n    return (\n      <AuthProvider currentUser={currentUser}>\n        <PageComponent {...pageProps} />\n      </AuthProvider>\n    )\n  }\n\n  WithAuth.getInitialProps = async ctx => {\n    const token = getToken(ctx.req)\n    let currentUser = undefined\n    let tokenIsValid = false\n\n    if (token) {\n      try {\n        await axios.post(`${apiBaseUrl}/validateToken`, { token }, { headers: { 'Content-Type': 'application/json' } })\n        tokenIsValid = true\n      } catch (ex) {}\n\n      if (tokenIsValid) {\n        const { data: { account }} = await ctx.apolloClient.query({\n          query: GET_ACCOUNT_QUERY,\n          variables: { email: jwtDecode(token).ema },\n          context: { headers: { 'schoolman_token': token } }\n        })\n        currentUser = account\n      }\n    }\n\n    // add token and currentUser to context, so they can be used in PageComponent.getInitialProps\n    ctx.token = token\n    ctx.currentUser = currentUser\n\n    let pageProps = {}\n    if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx)\n\n    const { authRequired } = pageProps\n\n    if (authRequired && !currentUser) {\n      if (typeof window === 'undefined') ctx.res.redirect('/signIn')\n      else Router.push('/signIn')\n    }\n\n    if (!tokenIsValid && (typeof window !== 'undefined')) removeCookie(authCookieName)\n\n    return { currentUser, ...pageProps }\n  }\n\n  return WithAuth\n}\n"]},"metadata":{},"sourceType":"module"}