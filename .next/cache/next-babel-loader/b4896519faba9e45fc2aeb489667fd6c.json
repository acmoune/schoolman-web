{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getDepartments {\\n    departments {\\n      id \\n      title\\n      programs {\\n        id \\n        title \\n        description \\n        logo \\n        link \\n        trainings { id title description banner link }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport { gql } from 'apollo-boost';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Link from 'next/link';\nimport DepList from '../components/catalog/DepList';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Hidden, Paper } from '@material-ui/core';\nimport ProgramSummaryContent from '../components/catalog/ProgramSummaryContent';\nimport TrainingSummary from '../components/catalog/TrainingSummary';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nvar GET_DEPARTMENTS_QUERY = gql(_templateObject());\n\nfunction ProgramPage(_ref) {\n  var programId = _ref.programId,\n      departments = _ref.departments;\n  var filtered = departments.flatMap(function (d) {\n    return d.programs;\n  }).filter(function (p) {\n    return p.id == programId;\n  });\n  var program = filtered.length > 0 ? filtered[0] : null;\n  if (!program) return __jsx(\"div\", null, \"Program not found\");\n  return __jsx(MainLayout, {\n    title: \"\".concat(program.title, \" - Program -  IMIT\")\n  }, __jsx(Container, null, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    sm: 3\n  }, __jsx(DepList, {\n    deps: departments,\n    selectedProgramId: programId\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: 15\n    }\n  }, __jsx(Paper, {\n    style: {\n      padding: 15\n    }\n  }, __jsx(ProgramSummaryContent, {\n    program: program,\n    displayLink: true\n  })), __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: 'center',\n      margin: '15px 0px'\n    }\n  }, \"Available training courses\"), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, program.trainings.map(function (t) {\n    return __jsx(Grid, {\n      item: true,\n      sm: 6\n    }, __jsx(Link, {\n      href: {\n        pathname: '/training',\n        query: {\n          trainingId: t.id\n        }\n      },\n      passHref: true\n    }, __jsx(TrainingSummary, {\n      training: t\n    })));\n  })))))));\n}\n\nProgramPage.getInitialProps = function _callee(_ref2) {\n  var query, apolloClient, token, _ref3, departments;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query, apolloClient = _ref2.apolloClient, token = _ref2.token;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_DEPARTMENTS_QUERY,\n            context: {\n              headers: {\n                'schoolman_token': token\n              }\n            }\n          }));\n\n        case 3:\n          _ref3 = _context.sent;\n          departments = _ref3.data.departments;\n          return _context.abrupt(\"return\", {\n            departments: departments,\n            programId: query.programId,\n            authRequired: false\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withApollo(withAuth(ProgramPage));","map":null,"metadata":{},"sourceType":"module"}