{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/data/apps/opensource/SchoolMan/web-client/pages/application.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProfile($email: String!) {\\n    account(email: $email) {\\n      id\\n      email\\n      fullName\\n      profile {\\n        id birthDate birthPlace residence phoneNumber nationality\\n        nicNumber nicDateOfIssue nicPlaceOfIssue\\n        highestAcademicQualification yearOfIssue englishGradeInGCEOL mathematicsGradeInGCEOL\\n        professionalQualification employmentStatus jobTitle yearsOfExperience employerName employerAddress\\n        otherDetails\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getTrainingSession($trainingSessionId: ID!) {\\n    trainingSession(trainingSessionId: $trainingSessionId) {\\n      id\\n      title\\n      startDate\\n      status\\n      fees {id description amount feeType optional}\\n      plan {\\n        id\\n        title\\n        duration\\n        training {\\n          id\\n          title\\n          program {\\n            id\\n            title\\n            department { id title }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Router from 'next/router';\nimport ApplicationStepper from '../components/ApplicationStepper';\nimport { gql } from 'apollo-boost';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nvar GET_SESSION_QUERY = gql(_templateObject());\n\nfunction ApplicationPage(_ref) {\n  var profile = _ref.profile,\n      tSession = _ref.tSession;\n\n  var handleCancel = function handleCancel() {\n    return Router.push({\n      pathname: '/training',\n      query: {\n        trainingId: tSession.plan.training.id\n      }\n    });\n  };\n\n  return __jsx(MainLayout, {\n    title: \"Applying for \".concat(tSession.plan.training.title, \" (\").concat(tSession.plan.title, \") - IMIT\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(ApplicationStepper, {\n    handleCancel: handleCancel,\n    trainingTitle: tSession.plan.training.title,\n    programTitle: tSession.plan.training.program.title,\n    departmentTitle: tSession.plan.training.program.department.title,\n    planTitle: tSession.plan.title,\n    planDuration: tSession.plan.duration,\n    session: tSession,\n    profile: profile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })));\n}\n\nvar GET_PROFILE_QUERY = gql(_templateObject2());\n\nApplicationPage.getInitialProps = function _callee(_ref2) {\n  var query, apolloClient, token, currentUser, profile, _ref3, account, _ref4, trainingSession;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query, apolloClient = _ref2.apolloClient, token = _ref2.token, currentUser = _ref2.currentUser;\n          profile = null;\n\n          if (!currentUser) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_PROFILE_QUERY,\n            variables: {\n              email: currentUser.email\n            },\n            context: {\n              headers: {\n                'schoolman_token': token\n              }\n            }\n          }));\n\n        case 5:\n          _ref3 = _context.sent;\n          account = _ref3.data.account;\n          profile = account.profile;\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_SESSION_QUERY,\n            variables: {\n              trainingSessionId: query.tsId\n            },\n            context: {\n              headers: {\n                'schoolman_token': token\n              }\n            }\n          }));\n\n        case 10:\n          _ref4 = _context.sent;\n          trainingSession = _ref4.data.trainingSession;\n          return _context.abrupt(\"return\", {\n            profile: profile,\n            tSession: trainingSession,\n            authReuired: true\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withApollo(withAuth(ApplicationPage));","map":{"version":3,"sources":["/data/apps/opensource/SchoolMan/web-client/pages/application.tsx"],"names":["React","Container","MainLayout","Router","ApplicationStepper","gql","withApollo","withAuth","GET_SESSION_QUERY","ApplicationPage","profile","tSession","handleCancel","push","pathname","query","trainingId","plan","training","id","title","program","department","duration","GET_PROFILE_QUERY","getInitialProps","apolloClient","token","currentUser","variables","email","context","headers","account","data","trainingSessionId","tsId","trainingSession","authReuired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Container from '../components/Container'\nimport MainLayout from '../layouts/MainLayout'\nimport Router from 'next/router'\nimport ApplicationStepper from '../components/ApplicationStepper'\nimport { gql } from 'apollo-boost'\nimport ITrainingSession from '../server/src/models/catalog/TrainingSession'\nimport IAccountProfileFields from '../server/src/models/accounts/AccountProfile'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\nconst GET_SESSION_QUERY = gql`\n  query getTrainingSession($trainingSessionId: ID!) {\n    trainingSession(trainingSessionId: $trainingSessionId) {\n      id\n      title\n      startDate\n      status\n      fees {id description amount feeType optional}\n      plan {\n        id\n        title\n        duration\n        training {\n          id\n          title\n          program {\n            id\n            title\n            department { id title }\n          }\n        }\n      }\n    }\n  }\n`\n\nfunction ApplicationPage({ profile, tSession }: { profile: IAccountProfileFields, tSession: ITrainingSession }) {\n  const handleCancel = () => Router.push({ pathname: '/training', query: { trainingId: tSession.plan.training.id }})\n  \n  return (\n    <MainLayout title={`Applying for ${tSession.plan.training.title} (${tSession.plan.title}) - IMIT`}>\n      <Container>\n        <br />\n        <ApplicationStepper \n          handleCancel={handleCancel}\n          trainingTitle={tSession.plan.training.title}\n          programTitle={tSession.plan.training.program.title}\n          departmentTitle={tSession.plan.training.program.department.title}\n          planTitle={tSession.plan.title}\n          planDuration={tSession.plan.duration}\n          session={tSession}\n          profile={profile}\n        />\n      </Container>\n    </MainLayout>\n  )\n}\n\nconst GET_PROFILE_QUERY = gql`\n  query getProfile($email: String!) {\n    account(email: $email) {\n      id\n      email\n      fullName\n      profile {\n        id birthDate birthPlace residence phoneNumber nationality\n        nicNumber nicDateOfIssue nicPlaceOfIssue\n        highestAcademicQualification yearOfIssue englishGradeInGCEOL mathematicsGradeInGCEOL\n        professionalQualification employmentStatus jobTitle yearsOfExperience employerName employerAddress\n        otherDetails\n      }\n    }\n  }\n`\n\nApplicationPage.getInitialProps = async ({ query, apolloClient, token, currentUser }: any) => {\n  var profile = null\n  \n  if (currentUser) {\n    const { data: { account }} = await apolloClient.query({\n      query: GET_PROFILE_QUERY,\n      variables: { email: currentUser.email },\n      context: { headers: { 'schoolman_token': token } }\n    })\n\n    profile = account.profile\n  }\n\n  const { data: { trainingSession }} = await apolloClient.query({\n    query: GET_SESSION_QUERY,\n    variables: { trainingSessionId: query.tsId },\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ profile, tSession: trainingSession, authReuired: true })\n}\n\nexport default withApollo(withAuth(ApplicationPage))\n"]},"metadata":{},"sourceType":"module"}