{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Alert from '../components/Alert';\nimport validator from 'validator';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Button } from '@material-ui/core';\n\nfunction ApplierForm({\n  data,\n  onSubmit\n}) {\n  const classes = makeStyles(theme => createStyles({\n    fieldGroup: {\n      marginBottom: 25,\n      padding: 10\n    },\n    groupTitle: {\n      fontSize: '12pt',\n      color: '#808080',\n      paddingBottom: 5,\n      borderBottom: '1px solid #DFDFDF',\n      fontWeight: 'bold',\n      marginBottom: 15\n    },\n    field: {\n      marginBottom: 30\n    }\n  }))();\n  const {\n    0: inputErrors,\n    1: setInputErrors\n  } = useState({\n    nameErrors: [],\n    emailErrors: []\n  });\n  const {\n    0: alertOptions,\n    1: setAlertOptions\n  } = useState({\n    open: false,\n    level: 'info',\n    message: ''\n  }); // Fields state variables\n\n  const {\n    0: name,\n    1: setName\n  } = useState(data.name);\n  const {\n    0: email,\n    1: setEmail\n  } = useState(data.email);\n\n  const validateData = () => {\n    const nameErrors = [];\n    const emailErrors = [];\n    if (validator.isEmpty(name)) nameErrors.push('Your name is required');\n    if (validator.isEmpty(email)) emailErrors.push('Your email is required');\n    const isValid = nameErrors.length == 0 && emailErrors.length == 0;\n    const errors = {\n      nameErrors,\n      emailErrors\n    };\n    return {\n      isValid,\n      errors\n    };\n  };\n\n  const submit = cb => {\n    const {\n      isValid,\n      errors\n    } = validateData();\n    setInputErrors(errors);\n    if (!isValid) return cb('Please enter valid inputs');\n    return cb('', {\n      name,\n      email\n    });\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(Paper, {\n    className: classes.fieldGroup\n  }, __jsx(\"div\", {\n    className: classes.groupTitle\n  }, \"Provide your name and email\"), __jsx(\"div\", null, __jsx(TextField, {\n    className: classes.field,\n    id: \"name\",\n    name: \"name\",\n    label: \"Full Name\",\n    fullWidth: true,\n    value: name,\n    onChange: e => setName(e.target.value),\n    error: inputErrors.nameErrors.length > 0,\n    helperText: inputErrors.nameErrors.join(', ')\n  }), __jsx(TextField, {\n    className: classes.field,\n    id: \"email\",\n    name: \"email\",\n    label: \"Email\",\n    fullWidth: true,\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    error: inputErrors.emailErrors.length > 0,\n    helperText: inputErrors.emailErrors.join(', ')\n  }))), __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => submit((errMessage, data) => {\n      if (errMessage) return setAlertOptions({\n        open: true,\n        level: 'error',\n        message: errMessage\n      });\n      if (data) return onSubmit(data);\n      return;\n    })\n  }, \"Save and Fill application form\")), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: () => setAlertOptions({\n      open: false,\n      level: alertOptions.level,\n      message: alertOptions.message\n    })\n  }));\n}\n\nexport default ApplierForm;","map":null,"metadata":{},"sourceType":"module"}