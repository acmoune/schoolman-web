{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { baseUrl, authCookieName } from '../app.config';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { getCookieFromBrowser } from '../lib/cookie';\nimport { typeDefs, resolvers } from '../lib/graphql/clientSchema';\nlet apolloClient = null;\n\nfunction createApolloClient(initialState = {}) {\n  const httpLink = new HttpLink({\n    uri: `${baseUrl}/graphql`,\n    credentials: 'same-origin',\n    fetch\n  });\n  const authLink = setContext((_, prevCtxt) => {\n    let headers = prevCtxt.headers || {};\n\n    if (!headers['schoolman_token']) {\n      const token = getCookieFromBrowser(authCookieName);\n      headers = _objectSpread({}, headers, {\n        'schoolman_token': token || ''\n      });\n    }\n\n    return {\n      headers\n    };\n  });\n  const cache = new InMemoryCache().restore(initialState);\n  const client = new ApolloClient({\n    ssrMode: true,\n    cache,\n    link: authLink.concat(httpLink),\n    typeDefs,\n    resolvers,\n    connectToDevTools: true\n  });\n  const data = {\n    // initial LocalState\n    applier: {\n      __typename: 'Applier',\n      name: '',\n      email: ''\n    },\n    applicationProfile: {\n      __typename: 'ProfileData',\n      birthDate: null,\n      birthPlace: '',\n      residence: '',\n      phoneNumber: '',\n      nationality: '',\n      nicNumber: '',\n      nicDateOfIssue: null,\n      nicPlaceOfIssue: '',\n      highestAcademicQualification: '',\n      yearOfIssue: new Date().getFullYear(),\n      englishGradeInGCEOL: '',\n      mathematicsGradeInGCEOL: '',\n      professionalQualification: '',\n      employmentStatus: 'JobSeeker',\n      jobTitle: '',\n      yearsOfExperience: 0,\n      employerName: '',\n      employerAddress: '',\n      otherDetails: null\n    }\n  };\n  cache.writeData({\n    data\n  });\n  client.onResetStore(() => cache.writeData({\n    data\n  }));\n  return client;\n}\n\nfunction initApolloClient(initialState) {\n  if (true) return createApolloClient(initialState);\n  if (!apolloClient) apolloClient = createApolloClient(initialState);\n  return apolloClient;\n}\n\nexport default function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(PageComponent, pageProps));\n  };\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = initApolloClient();\n      ctx.apolloClient = apolloClient;\n      let pageProps = {};\n      if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx); // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished. No point in continuing to render\n        if (ctx.res && ctx.res.finished) return pageProps;\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            const {\n              AppTree\n            } = ctx;\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              })\n            }));\n          } catch (error) {\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}","map":null,"metadata":{},"sourceType":"module"}