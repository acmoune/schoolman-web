{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/data/apps/school-manager-client/pages/application.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getTrainingSession($trainingSessionId: ID!) {\\n    trainingSession(trainingSessionId: $trainingSessionId) {\\n      id\\n      title\\n      startDate\\n      status\\n      fees {id description amount feeType optional}\\n      plan {\\n        id\\n        title\\n        duration\\n        training {\\n          id\\n          title\\n          program {\\n            id\\n            title\\n            department { id title }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Container from '../components/Container';\nimport MainLayout from '../layouts/MainLayout';\nimport Router from 'next/router';\nimport ApplicationStepper from '../components/ApplicationStepper';\nimport { gql } from 'apollo-boost';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\nvar GET_SESSION_QUERY = gql(_templateObject());\n\nfunction ApplicationPage(_ref) {\n  var tSession = _ref.tSession;\n\n  var handleCancel = function handleCancel() {\n    return Router.push({\n      pathname: '/training',\n      query: {\n        trainingId: tSession.plan.training.id\n      }\n    });\n  };\n\n  return __jsx(MainLayout, {\n    title: \"IMIT\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), __jsx(ApplicationStepper, {\n    handleCancel: handleCancel,\n    trainingTitle: tSession.plan.training.title,\n    programTitle: tSession.plan.training.program.title,\n    departmentTitle: tSession.plan.training.program.department.title,\n    planTitle: tSession.plan.title,\n    planDuration: tSession.plan.duration,\n    session: tSession,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })));\n}\n\nApplicationPage.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, apolloClient, token, _ref4, trainingSession;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query, apolloClient = _ref2.apolloClient, token = _ref2.token;\n            _context.next = 3;\n            return apolloClient.query({\n              query: GET_SESSION_QUERY,\n              variables: {\n                trainingSessionId: query.tsId\n              },\n              context: {\n                headers: {\n                  'schoolman_token': token\n                }\n              }\n            });\n\n          case 3:\n            _ref4 = _context.sent;\n            trainingSession = _ref4.data.trainingSession;\n            return _context.abrupt(\"return\", {\n              tSession: trainingSession,\n              authReuired: true\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withApollo(withAuth(ApplicationPage));","map":{"version":3,"sources":["/data/apps/school-manager-client/pages/application.tsx"],"names":["React","Container","MainLayout","Router","ApplicationStepper","gql","withApollo","withAuth","GET_SESSION_QUERY","ApplicationPage","tSession","handleCancel","push","pathname","query","trainingId","plan","training","id","title","program","department","duration","getInitialProps","apolloClient","token","variables","trainingSessionId","tsId","context","headers","trainingSession","data","authReuired"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,IAAMC,iBAAiB,GAAGH,GAAH,mBAAvB;;AA0BA,SAASI,eAAT,OAAuE;AAAA,MAA5CC,QAA4C,QAA5CA,QAA4C;;AACrE,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,WAAMR,MAAM,CAACS,IAAP,CAAY;AAAEC,MAAAA,QAAQ,EAAE,WAAZ;AAAyBC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAEL,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBC;AAArC;AAAhC,KAAZ,CAAN;AAAA,GAArB;;AAEA,SACE,MAAC,UAAD;AAAY,IAAA,KAAK,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,kBAAD;AACE,IAAA,YAAY,EAAEP,YADhB;AAEE,IAAA,aAAa,EAAED,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBE,KAFxC;AAGE,IAAA,YAAY,EAAET,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBG,OAAvB,CAA+BD,KAH/C;AAIE,IAAA,eAAe,EAAET,QAAQ,CAACM,IAAT,CAAcC,QAAd,CAAuBG,OAAvB,CAA+BC,UAA/B,CAA0CF,KAJ7D;AAKE,IAAA,SAAS,EAAET,QAAQ,CAACM,IAAT,CAAcG,KAL3B;AAME,IAAA,YAAY,EAAET,QAAQ,CAACM,IAAT,CAAcM,QAN9B;AAOE,IAAA,OAAO,EAAEZ,QAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAgBD;;AAEDD,eAAe,CAACc,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAkC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAST,YAAAA,KAAT,SAASA,KAAT,EAAgBU,YAAhB,SAAgBA,YAAhB,EAA8BC,KAA9B,SAA8BA,KAA9B;AAAA;AAAA,mBACWD,YAAY,CAACV,KAAb,CAAmB;AAC5DA,cAAAA,KAAK,EAAEN,iBADqD;AAE5DkB,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,iBAAiB,EAAEb,KAAK,CAACc;AAA3B,eAFiD;AAG5DC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,OAAO,EAAE;AAAE,qCAAmBL;AAArB;AAAX;AAHmD,aAAnB,CADX;;AAAA;AAAA;AAChBM,YAAAA,eADgB,SACxBC,IADwB,CAChBD,eADgB;AAAA,6CAOxB;AAAErB,cAAAA,QAAQ,EAAEqB,eAAZ;AAA6BE,cAAAA,WAAW,EAAE;AAA1C,aAPwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe3B,UAAU,CAACC,QAAQ,CAACE,eAAD,CAAT,CAAzB","sourcesContent":["import React from 'react'\nimport Container from '../components/Container'\nimport MainLayout from '../layouts/MainLayout'\nimport Router from 'next/router'\nimport ApplicationStepper from '../components/ApplicationStepper'\nimport { gql } from 'apollo-boost'\nimport ITrainingSession from '../server/src/models/catalog/TrainingSession'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\nconst GET_SESSION_QUERY = gql`\n  query getTrainingSession($trainingSessionId: ID!) {\n    trainingSession(trainingSessionId: $trainingSessionId) {\n      id\n      title\n      startDate\n      status\n      fees {id description amount feeType optional}\n      plan {\n        id\n        title\n        duration\n        training {\n          id\n          title\n          program {\n            id\n            title\n            department { id title }\n          }\n        }\n      }\n    }\n  }\n`\n\nfunction ApplicationPage({ tSession }: { tSession: ITrainingSession }) {\n  const handleCancel = () => Router.push({ pathname: '/training', query: { trainingId: tSession.plan.training.id }})\n  \n  return (\n    <MainLayout title=\"IMIT\">\n      <Container>\n        <br />\n        <ApplicationStepper \n          handleCancel={handleCancel}\n          trainingTitle={tSession.plan.training.title}\n          programTitle={tSession.plan.training.program.title}\n          departmentTitle={tSession.plan.training.program.department.title}\n          planTitle={tSession.plan.title}\n          planDuration={tSession.plan.duration}\n          session={tSession}\n        />\n      </Container>\n    </MainLayout>\n  )\n}\n\nApplicationPage.getInitialProps = async ({ query, apolloClient, token }: any) => {\n  const { data: { trainingSession }} = await apolloClient.query({\n    query: GET_SESSION_QUERY,\n    variables: { trainingSessionId: query.tsId },\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ tSession: trainingSession, authReuired: true })\n}\n\nexport default withApollo(withAuth(ApplicationPage))\n"]},"metadata":{},"sourceType":"module"}