{"ast":null,"code":"var _jsxFileName = \"/data/apps/school-manager-client/pages/resetPassword.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport MainLayout from '../layouts/MainLayout';\nimport Container from '../components/Container';\nimport { Typography, Paper, TextField, Button } from '@material-ui/core';\nimport axios from 'axios';\nimport validator from 'validator';\nimport { apiBaseUrl } from '../app.config';\nimport Alert from '../components/Alert';\nimport { authCookieName } from '../app.config';\nimport { getCookieFromBrowser } from '../lib/cookie';\nimport { useAuth } from '../components/AuthContext';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\n\nfunction ResetPasswordPage() {\n  const {\n    currentUser\n  } = useAuth();\n  const [oldPassword, setOldPassword] = React.useState('');\n  const [newPassword, setNewPassword] = React.useState('');\n  const [passwordConfirmation, setPasswordConfirmation] = React.useState('');\n  const [inputErrors, setInputErrors] = React.useState({\n    oldPasswordErrors: [],\n    newPasswordErrors: [],\n    passwordConfirmationErrors: []\n  });\n  const [alertOptions, setAlertOptions] = React.useState({\n    open: false,\n    level: 'info',\n    message: ''\n  });\n\n  const validateData = () => {\n    const oldPasswordErrors = [];\n    const newPasswordErrors = [];\n    const passwordConfirmationErrors = [];\n    if (validator.isEmpty(oldPassword)) oldPasswordErrors.push('The current password is required');\n    if (validator.isEmpty(newPassword)) newPasswordErrors.push('The new password is required');\n    if (!validator.isLength(newPassword, {\n      min: 6\n    })) newPasswordErrors.push('The password should have at least 6 charactars');\n    if (newPassword !== passwordConfirmation) passwordConfirmationErrors.push('Confirmation does not match the new password');\n    const isValid = oldPasswordErrors.length == 0 && newPasswordErrors.length == 0 && passwordConfirmationErrors.length == 0;\n    const errors = {\n      oldPasswordErrors,\n      newPasswordErrors,\n      passwordConfirmationErrors\n    };\n    return {\n      isValid,\n      errors\n    };\n  };\n\n  const submit = (email, cb) => {\n    const {\n      isValid,\n      errors\n    } = validateData();\n    setInputErrors(errors);\n\n    if (!isValid && errors) {\n      return cb('Please enter valid inputs');\n    }\n\n    return axios.patch(`${apiBaseUrl}/accountPassword`, {\n      email,\n      oldPassword,\n      newPassword\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'schoolman_token': getCookieFromBrowser(authCookieName)\n      }\n    }).then(() => cb()).catch(err => {\n      console.log(err);\n      cb(err.response.data.message || err.response.statusText);\n    });\n  };\n\n  return __jsx(MainLayout, {\n    title: \"Reset Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Container, {\n    maxWidth: 400,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: 50,\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    style: {\n      textAlign: 'center',\n      paddingBottom: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Reset Password\"), __jsx(Paper, {\n    style: {\n      padding: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, currentUser && __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(TextField, {\n    id: \"oldPassword\",\n    name: \"oldPassword\",\n    label: \"Current Password\",\n    type: \"password\",\n    fullWidth: true,\n    value: oldPassword,\n    onChange: e => setOldPassword(e.target.value),\n    error: inputErrors.oldPasswordErrors.length > 0,\n    helperText: inputErrors.oldPasswordErrors.join(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), __jsx(TextField, {\n    id: \"newPassword\",\n    name: \"newPassword\",\n    label: \"New Password\",\n    type: \"password\",\n    fullWidth: true,\n    value: newPassword,\n    onChange: e => setNewPassword(e.target.value),\n    error: inputErrors.newPasswordErrors.length > 0,\n    helperText: inputErrors.newPasswordErrors.join(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(TextField, {\n    id: \"passwordConfirmation\",\n    name: \"passwordConfirmation\",\n    label: \"Password Confirmation\",\n    type: \"password\",\n    fullWidth: true,\n    value: passwordConfirmation,\n    onChange: e => setPasswordConfirmation(e.target.value),\n    error: inputErrors.passwordConfirmationErrors.length > 0,\n    helperText: inputErrors.passwordConfirmationErrors.join(', '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(Button, {\n    color: \"secondary\",\n    size: \"large\",\n    fullWidth: true,\n    variant: \"contained\",\n    onClick: () => submit(currentUser.email, errMessage => {\n      if (errMessage) return setAlertOptions({\n        open: true,\n        level: 'error',\n        message: errMessage\n      });\n      setOldPassword('');\n      setNewPassword('');\n      setPasswordConfirmation('');\n      setAlertOptions({\n        open: true,\n        level: 'info',\n        message: 'Password updated successfully'\n      });\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Submit\"))))), __jsx(\"div\", {\n    style: {\n      color: '#808080',\n      fontSize: '9pt',\n      padding: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Forgot your current password ? Please contact Administration.\")), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: () => setAlertOptions({\n      open: false,\n      level: alertOptions.level,\n      message: alertOptions.message\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }));\n}\n\nResetPasswordPage.getInitialProps = () => ({\n  authRequired: true\n});\n\nexport default withApollo(withAuth(ResetPasswordPage));","map":{"version":3,"sources":["/data/apps/school-manager-client/pages/resetPassword.tsx"],"names":["React","MainLayout","Container","Typography","Paper","TextField","Button","axios","validator","apiBaseUrl","Alert","authCookieName","getCookieFromBrowser","useAuth","withApollo","withAuth","ResetPasswordPage","currentUser","oldPassword","setOldPassword","useState","newPassword","setNewPassword","passwordConfirmation","setPasswordConfirmation","inputErrors","setInputErrors","oldPasswordErrors","newPasswordErrors","passwordConfirmationErrors","alertOptions","setAlertOptions","open","level","message","validateData","isEmpty","push","isLength","min","isValid","length","errors","submit","email","cb","patch","headers","then","catch","err","console","log","response","data","statusText","marginTop","marginBottom","textAlign","paddingBottom","padding","e","target","value","join","errMessage","color","fontSize","getInitialProps","authRequired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Container from '../components/Container'\nimport { Typography, Paper, TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport validator from 'validator'\nimport { apiBaseUrl } from '../app.config'\nimport Alert, { AlertOptions } from '../components/Alert'\nimport { authCookieName } from '../app.config'\nimport { getCookieFromBrowser } from '../lib/cookie'\nimport { useAuth } from '../components/AuthContext'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\ntype InputErrors = { \n  oldPasswordErrors: string[], \n  newPasswordErrors: string[], \n  passwordConfirmationErrors: string[]\n}\n\nfunction ResetPasswordPage() {\n  const { currentUser } = useAuth()\n\n  const [oldPassword, setOldPassword] = React.useState<string>('')\n  const [newPassword, setNewPassword] = React.useState<string>('')\n  const [passwordConfirmation, setPasswordConfirmation] = React.useState<string>('')\n  const [inputErrors, setInputErrors] = React.useState<InputErrors>({ oldPasswordErrors: [], newPasswordErrors: [], passwordConfirmationErrors: [] })\n  const [alertOptions, setAlertOptions] = React.useState<AlertOptions>({ open: false, level: 'info', message: '' })\n\n  const validateData = (): { isValid: boolean, errors: InputErrors } => {\n    const oldPasswordErrors: string[] = []\n    const newPasswordErrors: string[] = []\n    const passwordConfirmationErrors: string[] = []\n\n    if (validator.isEmpty(oldPassword)) oldPasswordErrors.push('The current password is required')\n\n    if (validator.isEmpty(newPassword)) newPasswordErrors.push('The new password is required')\n    if (!validator.isLength(newPassword, { min: 6 })) newPasswordErrors.push('The password should have at least 6 charactars')\n\n    if (newPassword !== passwordConfirmation) passwordConfirmationErrors.push('Confirmation does not match the new password')\n\n    const isValid = oldPasswordErrors.length == 0 && newPasswordErrors.length == 0 && passwordConfirmationErrors.length == 0\n    const errors = { oldPasswordErrors, newPasswordErrors, passwordConfirmationErrors }\n    return ({ isValid, errors })\n  }\n\n  const submit = (email: string, cb: (errMessage?: string) => any) => {\n    const { isValid, errors } = validateData()\n    setInputErrors(errors)\n\n    if (!isValid && errors) {\n      return cb('Please enter valid inputs')\n    }\n\n    return axios.patch(`${apiBaseUrl}/accountPassword`, { email, oldPassword, newPassword }, {\n      headers: { \n        'Content-Type': 'application/json',\n        'schoolman_token': getCookieFromBrowser(authCookieName)\n      }\n    })\n      .then(() => cb())\n      .catch(err => { console.log(err); cb(err.response.data.message || err.response.statusText) })\n  }\n\n  return (\n    <MainLayout title=\"Reset Password\">\n      <Container maxWidth={400}>\n        <div style={{ marginTop: 50, marginBottom: 20 }}>\n          <Typography variant=\"h5\" color=\"textSecondary\" style={{ textAlign: 'center', paddingBottom: 15 }}>Reset Password</Typography>\n\n          <Paper style={{ padding: 15 }}>\n            <div>\n              {currentUser &&\n                <div> \n                  <TextField\n                    id=\"oldPassword\"\n                    name=\"oldPassword\"\n                    label=\"Current Password\"\n                    type=\"password\"\n                    fullWidth\n                    value={oldPassword}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setOldPassword(e.target.value)}\n                    error={inputErrors.oldPasswordErrors.length > 0}\n                    helperText={inputErrors.oldPasswordErrors.join(', ')}\n                  />\n    \n                  <br />\n                  <br />\n    \n                  <TextField\n                    id=\"newPassword\"\n                    name=\"newPassword\"\n                    label=\"New Password\"\n                    type=\"password\"\n                    fullWidth\n                    value={newPassword}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewPassword(e.target.value)}\n                    error={inputErrors.newPasswordErrors.length > 0}\n                    helperText={inputErrors.newPasswordErrors.join(', ')}\n                  />\n    \n                  <br />\n                  <br />\n    \n                  <TextField\n                    id=\"passwordConfirmation\"\n                    name=\"passwordConfirmation\"\n                    label=\"Password Confirmation\"\n                    type=\"password\"\n                    fullWidth\n                    value={passwordConfirmation}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswordConfirmation(e.target.value)}\n                    error={inputErrors.passwordConfirmationErrors.length > 0}\n                    helperText={inputErrors.passwordConfirmationErrors.join(', ')}\n                  />\n    \n                  <br />\n                  <br />\n                  <br />\n    \n                  <Button\n                    color=\"secondary\"\n                    size=\"large\"\n                    fullWidth\n                    variant=\"contained\"\n                    onClick={() => submit(currentUser.email, (errMessage) => {\n                      if (errMessage) return setAlertOptions({ open: true, level: 'error', message: errMessage })\n                      setOldPassword('')\n                      setNewPassword('')\n                      setPasswordConfirmation('')\n                      setAlertOptions({ open: true, level: 'info', message: 'Password updated successfully' })\n                    })}\n                  >\n                    Submit\n                  </Button>\n                </div>\n              }\n            </div>\n          </Paper>\n        </div>\n\n        <div style={{ color: '#808080', fontSize: '9pt', padding: 10 }}>\n          Forgot your current password ? Please contact Administration.\n        </div>\n      </Container>\n\n      <Alert \n        level={alertOptions.level}\n        message={alertOptions.message}\n        open={alertOptions.open}\n        onClose={() => setAlertOptions({ open: false, level: alertOptions.level, message: alertOptions.message })}\n      />\n    </MainLayout>\n  )\n}\n\nResetPasswordPage.getInitialProps = () => ({ authRequired: true }) \n\nexport default withApollo(withAuth(ResetPasswordPage))\n"]},"metadata":{},"sourceType":"module"}