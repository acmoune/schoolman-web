{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport MainLayout from '../layouts/MainLayout';\nimport Container from '../components/Container';\nimport { Typography, Paper, TextField, Button } from '@material-ui/core';\nimport axios from 'axios';\nimport validator from 'validator';\nimport { apiBaseUrl } from '../app.config';\nimport Alert from '../components/Alert';\nimport { authCookieName } from '../app.config';\nimport { getCookieFromBrowser } from '../lib/cookie';\nimport { useAuth } from '../components/AuthContext';\nimport withApollo from '../lib/with-apollo';\nimport withAuth from '../lib/with-auth';\n\nfunction ResetPasswordPage() {\n  const {\n    currentUser\n  } = useAuth();\n  const [oldPassword, setOldPassword] = React.useState('');\n  const [newPassword, setNewPassword] = React.useState('');\n  const [passwordConfirmation, setPasswordConfirmation] = React.useState('');\n  const [inputErrors, setInputErrors] = React.useState({\n    oldPasswordErrors: [],\n    newPasswordErrors: [],\n    passwordConfirmationErrors: []\n  });\n  const [alertOptions, setAlertOptions] = React.useState({\n    open: false,\n    level: 'info',\n    message: ''\n  });\n\n  const validateData = () => {\n    const oldPasswordErrors = [];\n    const newPasswordErrors = [];\n    const passwordConfirmationErrors = [];\n    if (validator.isEmpty(oldPassword)) oldPasswordErrors.push('The current password is required');\n    if (validator.isEmpty(newPassword)) newPasswordErrors.push('The new password is required');\n    if (!validator.isLength(newPassword, {\n      min: 6\n    })) newPasswordErrors.push('The password should have at least 6 charactars');\n    if (newPassword !== passwordConfirmation) passwordConfirmationErrors.push('Confirmation does not match the new password');\n    const isValid = oldPasswordErrors.length == 0 && newPasswordErrors.length == 0 && passwordConfirmationErrors.length == 0;\n    const errors = {\n      oldPasswordErrors,\n      newPasswordErrors,\n      passwordConfirmationErrors\n    };\n    return {\n      isValid,\n      errors\n    };\n  };\n\n  const submit = (email, cb) => {\n    const {\n      isValid,\n      errors\n    } = validateData();\n    setInputErrors(errors);\n\n    if (!isValid && errors) {\n      return cb('Please enter valid inputs');\n    }\n\n    return axios.patch(`${apiBaseUrl}/accountPassword`, {\n      email,\n      oldPassword,\n      newPassword\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'schoolman_token': getCookieFromBrowser(authCookieName)\n      }\n    }).then(() => cb()).catch(err => {\n      console.log(err);\n      cb(err.response.data.message || err.response.statusText);\n    });\n  };\n\n  return __jsx(MainLayout, {\n    title: \"Reset Password\"\n  }, __jsx(Container, {\n    maxWidth: 400\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: 50,\n      marginBottom: 20\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    style: {\n      textAlign: 'center',\n      paddingBottom: 15\n    }\n  }, \"Reset Password\"), __jsx(Paper, {\n    style: {\n      padding: 15\n    }\n  }, __jsx(\"div\", null, currentUser && __jsx(\"div\", null, __jsx(TextField, {\n    id: \"oldPassword\",\n    name: \"oldPassword\",\n    label: \"Current Password\",\n    type: \"password\",\n    fullWidth: true,\n    value: oldPassword,\n    onChange: e => setOldPassword(e.target.value),\n    error: inputErrors.oldPasswordErrors.length > 0,\n    helperText: inputErrors.oldPasswordErrors.join(', ')\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    id: \"newPassword\",\n    name: \"newPassword\",\n    label: \"New Password\",\n    type: \"password\",\n    fullWidth: true,\n    value: newPassword,\n    onChange: e => setNewPassword(e.target.value),\n    error: inputErrors.newPasswordErrors.length > 0,\n    helperText: inputErrors.newPasswordErrors.join(', ')\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(TextField, {\n    id: \"passwordConfirmation\",\n    name: \"passwordConfirmation\",\n    label: \"Password Confirmation\",\n    type: \"password\",\n    fullWidth: true,\n    value: passwordConfirmation,\n    onChange: e => setPasswordConfirmation(e.target.value),\n    error: inputErrors.passwordConfirmationErrors.length > 0,\n    helperText: inputErrors.passwordConfirmationErrors.join(', ')\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Button, {\n    color: \"secondary\",\n    size: \"large\",\n    fullWidth: true,\n    variant: \"contained\",\n    onClick: () => submit(currentUser.email, errMessage => {\n      if (errMessage) return setAlertOptions({\n        open: true,\n        level: 'error',\n        message: errMessage\n      });\n      setOldPassword('');\n      setNewPassword('');\n      setPasswordConfirmation('');\n      setAlertOptions({\n        open: true,\n        level: 'info',\n        message: 'Password updated successfully'\n      });\n    })\n  }, \"Submit\"))))), __jsx(\"div\", {\n    style: {\n      color: '#808080',\n      fontSize: '9pt',\n      padding: 10\n    }\n  }, \"Forgot your current password ? Please contact Administration.\")), __jsx(Alert, {\n    level: alertOptions.level,\n    message: alertOptions.message,\n    open: alertOptions.open,\n    onClose: () => setAlertOptions({\n      open: false,\n      level: alertOptions.level,\n      message: alertOptions.message\n    })\n  }));\n}\n\nResetPasswordPage.getInitialProps = () => ({\n  authRequired: true\n});\n\nexport default withApollo(withAuth(ResetPasswordPage));","map":null,"metadata":{},"sourceType":"module"}