{"version":3,"file":"static/webpack/static/development/pages/application.js.75610a39e786841d8796.hot-update.js","sources":["webpack:///./components/ApplicationStepper.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\nimport { \n  Stepper, \n  Step, \n  StepLabel, \n  Button, \n  Paper, \n  Hidden, \n  Typography,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  CircularProgress\n} from '@material-ui/core'\nimport ITrainingSession from '../server/src/models/catalog/TrainingSession'\nimport IAccountProfileFields from '../server/src/models/accounts/AccountProfile'\nimport Container from './Container'\nimport { useAuth } from '../components/AuthContext'\nimport ProfileForm from '../components/ProfileForm'\nimport ProfileView from './ProfileView'\nimport Link from 'next/link'\nimport { IProfileData } from '../server/src/models/accounts/AccountProfile'\nimport { gql } from 'apollo-boost'\nimport { useApolloClient } from '@apollo/react-hooks'\nimport ApplierForm from './ApplierForm'\nimport Alert, { AlertOptions } from '../components/Alert'\nimport sendMail from '../lib/send-mail'\nimport { currency } from '../lib/utilities'\nimport { applicationReceiver } from '../app.config'\n\nexport type StepItem = 'ConfirmAccount' \n  | 'FillApplicationForm' \n  | 'ReviewProfileData' \n  | 'ReviewTrainingSession' \n  | 'ApplicationConfirmation'\n\n\nconst GET_APPLICATION_PROFILE_QUERY = gql`\n  query getApplicationProfile {\n    applicationProfile @client {\n      birthDate\n      birthPlace\n      residence\n      phoneNumber\n      nationality\n      otherDetails\n    }\n  }\n`\n\nconst GET_APPLIER_QUERY = gql`\n  query getApplier {\n    applier @client {\n      name\n      email\n    }\n  }\n`\n\nconst resetApplicationData = (client: any) => {\n  client.writeQuery({\n    query: GET_APPLIER_QUERY,\n    data: { applier: { __typename: 'Applier', name: '', email: '' } }\n  })\n\n  client.writeQuery({\n    query: GET_APPLICATION_PROFILE_QUERY,\n    data: {\n      applicationProfile: {\n        __typename: 'ProfileData',\n        birthDate: null,\n        birthPlace: '',\n        residence: '',\n        phoneNumber: '',\n        nationality: '',\n        otherDetails: null\n      }\n    }\n  })\n}\n\nexport default function ApplicationStepper(\n  props: { \n    handleCancel: Function,\n    trainingTitle: string,\n    departmentTitle: string,\n    programTitle: string,\n    planTitle: string,\n    planDuration: string,\n    session: ITrainingSession,\n    profile: IAccountProfileFields\n  }\n) {\n  const classes = makeStyles((theme: Theme) => createStyles({\n    root: { width: '100%' },\n    btnBar: {\n      display: 'flex',\n      padding: '10px 0px',\n      borderTop: '1px solid #DFDFDF'\n    },\n    btnLeft: {\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'flex-start'\n    },\n    btnRight: {\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'flex-end'\n    }\n  }))()\n\n  const [alertOptions, setAlertOptions] = useState<AlertOptions>({ open: false, level: 'info', message: '' })\n  const [sending, setSending] = useState<boolean>(false)\n  const { currentUser } = useAuth()\n  const client = useApolloClient()\n  const { applicationProfile }: any = client.readQuery({ query: GET_APPLICATION_PROFILE_QUERY })\n  const { applier }: any = client.readQuery({ query: GET_APPLIER_QUERY })\n  const steps = getSteps(!!currentUser)\n  const [step, setStep] = useState<StepItem>('ConfirmAccount')\n  const activeStep = step === 'ApplicationConfirmation' ? \n    (currentUser ? 3 : 4) : \n    steps.filter(s => s.step === step)[0].id\n\n\n  const idBody = (data: { name: string, email: string }) => {\n    return `\n      <div>\n        <p>Dear ${data.name}, your application is being processed; you will have a response as soon as possible. See details below:</p>\n\n        <h3>Name and Email</h3>\n        <p><strong>Name</strong><br/>${data.name}</p>\n        <p><strong>Email</strong><br/>${data.email}</p>\n        <br />\n        <br />\n      </div>\n    `\n  }\n\n  const sessionBody = () => {\n    return `\n      <div>\n        <h3>Session details</h3>\n        <p><strong>Department</strong><br/>${props.departmentTitle}</p>\n        <p><strong>Program</strong><br/>${props.programTitle}</p>\n        <p><strong>Plan</strong><br/>${props.planTitle}</p>\n        <p><strong>Training</strong><br/>${props.trainingTitle}</p>\n        <p><strong>Session</strong><br/>${props.session.title}</p>\n        <p><strong>Start date</strong><br/>${props.session.startDate && new Date(props.session.startDate).toLocaleDateString()}</p>\n        <p><strong>Duration</strong><br/>${props.planDuration}</p>\n        <br />\n        <br />\n      </div>\n    `\n  }\n\n  const profileBody = (profile: IProfileData) => {\n    return `\n      <div>\n        <h3>Profile details</h3>\n        <p><strong>Birthdate</strong><br/>${new Date(profile.birthDate).toLocaleDateString()}</p>\n        <p><strong>Birth place</strong><br/>${profile.birthPlace}</p>\n        <p><strong>Residence</strong><br/>${profile.residence}</p>\n        <p><strong>Phone number</strong><br/>${profile.phoneNumber}</p>\n        <p><strong>Nationality</strong><br/>${profile.nationality}</p>\n        <p><strong>Other details</strong><br/>${profile.otherDetails || '(missing)'}</p>\n        <br />\n        <br />\n      </div>\n    `\n  }\n\n  const goToStep = (nextStep: StepItem) => setStep(nextStep)\n  \n  const handleBack = () => {\n    switch (step) {\n      case 'ConfirmAccount':\n        return\n      case 'FillApplicationForm':\n        return goToStep('ConfirmAccount')\n\n      case 'ReviewProfileData':\n        if (currentUser) return goToStep('ConfirmAccount')\n        else return goToStep('FillApplicationForm')\n\n      case 'ReviewTrainingSession':\n        return goToStep('ReviewProfileData')\n    }\n  }\n  \n  function getSteps(loggedIn: boolean) {\n    const steps = []; let index = 0\n\n    steps.push({ step: 'ConfirmAccount', caption: 'Confirm your account', id: index }); index += 1\n    if (!loggedIn) {steps.push({ step: 'FillApplicationForm', caption: 'Fill application form', id: index }); index += 1 }\n    steps.push({ step: 'ReviewProfileData', caption: 'Review your profile', id: index });  index += 1\n    steps.push({ step: 'ReviewTrainingSession', caption: 'Review training session', id: index })\n\n    return steps\n  }\n\n  function ConfirmAccountStep() {\n    const classes = makeStyles((theme: Theme) => createStyles({\n      root: {\n        marginBottom: 40,\n        paddingTop: 30,\n        paddingBottom: 15,\n        textAlign: 'center'\n      },\n      hasAccount: {},\n      noAccount: {\n        marginBottom: 30\n      }\n    }))()\n  \n    return (\n      <Container maxWidth={500}>\n        <div style={{padding: 10, textAlign: 'center'}}>\n          <Typography variant=\"h5\">Confirm your account</Typography>\n        </div>\n  \n        <div className={classes.root}>\n          {currentUser ?\n            <div>\n              <div>You are applying as</div>\n              <div><Typography variant=\"h4\" color=\"secondary\">{currentUser.fullName}</Typography></div>\n              <div style={{ fontSize: '10pt', color: '#808080', marginBottom: 10 }}>({currentUser.email})</div>\n              <div>\n                <Button \n                  size=\"large\" \n                  variant=\"contained\" \n                  color=\"secondary\"\n                  onClick={() => goToStep('ReviewProfileData')}\n                >\n                  Review your profile\n                </Button>\n              </div>\n  \n              <Container maxWidth={300}>\n                <div style={{ fontSize: '9pt', color: '#808080', textAlign: 'center', paddingTop: 10 }}>\n                  If you want to use a different account, sign out first, then sign in with the right account.\n                </div>\n              </Container>\n            </div> :\n  \n            <div>\n              <div className={classes.noAccount}>\n                <div style={{ fontWeight: 'bold', marginBottom: 15 }}>Don't have an account yet ?</div>\n                <div>\n                  <ApplierForm\n                    data={applier}\n                    onSubmit={(data: any) => {\n                      client.writeQuery({\n                        query: GET_APPLIER_QUERY,\n                        data: {\n                          applier: {\n                            __typename: 'Applier',\n                            ...data\n                          }\n                        }\n                      })\n\n                      goToStep('FillApplicationForm')\n                    }}\n                  />\n                </div>\n  \n                <Container maxWidth={300}>\n                  <div style={{ fontSize: '9pt', color: '#808080', textAlign: 'center', paddingTop: 10 }}>\n                    If your application is successfull, those information will be used to create your account.\n                  </div>\n                </Container>\n              </div>\n  \n              <div className={classes.hasAccount}>\n                Already have an account ? &nbsp;\n                <Link \n                  href={{ \n                    pathname: '/signIn', \n                    query: { backTo: `/application?tsId=${props.session.id}` }\n                  }}\n                >\n                  <a style={{ textDecoration: 'none', color: '#FABD03' }}>Sign in</a>\n                </Link>\n              </div>\n            </div>\n          }\n        </div>\n      </Container>\n    )\n  }\n  \n  function FillApplicationFormStep(props: { onSubmit: (data: IProfileData) => void }) {\n    return (\n      <div>\n        <div style={{textAlign: 'center'}}>\n          <div style={{padding: 10, textAlign: 'center'}}>\n            <Typography variant=\"h5\">Application form</Typography>\n          </div>\n  \n          <Container maxWidth={600}>\n            <ProfileForm \n              profile={applicationProfile}\n              submitText=\"Save and Review your data\"\n              onSubmit={(data) => props.onSubmit(data)}\n            />\n          </Container>\n  \n          <br />\n        </div>\n      </div>\n    )\n  }\n  \n  function ReviewProfileDataStep() {\n    if (currentUser && !props.profile) \n      return (\n        <div style={{ textAlign: 'center', padding: 50 }}>\n          You don't have a profile yet. Please <Link href=\"/myProfile\"><a>create your profile</a></Link> and retry to apply.\n        </div>\n      )\n  \n    return (\n      <div style={{textAlign: 'center'}}>\n        <div style={{padding: 10, textAlign: 'center'}}>\n          <Typography variant=\"h5\">Review your Profile</Typography>\n        </div>\n  \n        {currentUser ?\n          <div>\n            <div style={{ fontSize: '9pt', color: '#808080', margin: '10px 0px' }}>\n              If your profile is not up to date, please update it first then try to apply again.\n            </div>\n  \n            <ProfileView profile={currentUser.profile} />\n          </div> :\n  \n          <div>\n            <ProfileView profile={applicationProfile} />\n          </div>\n        }\n  \n        <br />\n  \n        <div>\n          {((currentUser && currentUser.profile) || (!currentUser)) && \n            <Button \n              size=\"large\" \n              variant=\"contained\" \n              color=\"secondary\"\n              onClick={() => goToStep('ReviewTrainingSession')}\n            >\n              Review Training Session Details\n            </Button>\n          }\n        </div>\n  \n        <br />\n      </div>\n    )\n  }\n  \n  function ReviewTrainingSessionStep() {\n    const classes = makeStyles((theme: Theme) => createStyles({\n      root: {\n        marginBottom: 40,\n        textAlign: 'center'\n      }\n    }))()\n  \n    if (currentUser && !props.profile) \n      return (\n        <div style={{ textAlign: 'center', padding: 50 }}>\n          You don't have a profile yet. Please <Link href=\"/myProfile\"><a>create your profile</a></Link> and retry to apply.\n        </div>\n      )\n  \n    return (\n      <Container maxWidth={600}>\n        <div style={{padding: 10, textAlign: 'center'}}>\n          <Typography variant=\"h5\">Review Training Session Details</Typography>\n        </div>\n  \n        <div className={classes.root}>\n          <div>\n            <Paper>  \n              <div style={{ padding: 10 }}>\n                <Table size=\"small\" style={{ border: '1px solid #DFDFDF' }}>\n                  <TableBody>\n                    <TableRow key=\"dep\">\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Department</TableCell>\n                      <TableCell align=\"right\">{props.departmentTitle}</TableCell>\n                    </TableRow>\n  \n                    <TableRow key=\"program\">\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Program</TableCell>\n                      <TableCell align=\"right\">{props.programTitle}</TableCell>\n                    </TableRow>\n  \n                    <TableRow key=\"plan\">\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Plan</TableCell>\n                      <TableCell align=\"right\">{props.planTitle}</TableCell>\n                    </TableRow>\n\n                    <TableRow key=\"training\">\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Training</TableCell>\n                      <TableCell align=\"right\">{props.trainingTitle}</TableCell>\n                    </TableRow>\n  \n                    <TableRow key=\"session\">\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Session</TableCell>\n                      <TableCell align=\"right\">{props.session.title}</TableCell>\n                    </TableRow>\n  \n                    <TableRow key=\"sdate\">\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Start date</TableCell>\n                      <TableCell align=\"right\">{props.session.startDate}</TableCell>\n                    </TableRow>\n  \n                    <TableRow key=\"duration\">\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Duration</TableCell>\n                      <TableCell align=\"right\">{props.planDuration}</TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </div>\n  \n              {props.session.fees.length > 0 ?\n                <div style={{ padding: 10 }}>\n                  <div style={{ marginBottom: 5, color: '#808080' }}>Fees</div>\n  \n                  <Table size=\"small\" style={{ border: '1px solid #DFDFDF' }}>\n                    <TableHead>\n                      <TableRow style={{ backgroundColor: '#DFDFDF' }}>\n                        <TableCell>Description</TableCell>\n                        <TableCell>Type</TableCell>\n                        <TableCell align=\"right\">Amount</TableCell>\n                      </TableRow>\n                    </TableHead>\n  \n                    <TableBody>\n                      {props.session.fees.map(f => (\n                        <TableRow key={f.id}>\n                          <TableCell>{f.description} {f.optional && <span style={{color: '#808080'}}>(Optional)</span>}</TableCell>\n                          <TableCell>{f.feeType}</TableCell>\n                          <TableCell align=\"right\">\n                            {f.promotionalAmount > 0 ?\n                              <div>\n                                <span style={{textDecoration: 'line-through'}}>{currency(f.amount)}</span> &nbsp;\n                                <span style={{color: 'orange'}}>{currency(f.promotionalAmount)}</span>\n                              </div> :\n                              <span>{currency(f.amount)}</span>\n                            }\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n  \n                  <Container maxWidth={400}>\n                    <div style={{ fontSize: '9pt', color: '#808080', textAlign: 'center', paddingTop: 10 }}>\n                      <strong>Note: </strong> These fees are the training fees at the time the session was created, they might\n                      be different from the current training fees.\n                    </div>\n                  </Container>\n                </div> :\n                <div style={{ padding: 20 }}>No fees</div>\n              }\n            </Paper>\n  \n            <div>\n              <Button \n                size=\"large\" \n                variant=\"contained\" \n                color=\"secondary\"\n                style={{ marginTop: 15 }}\n                disabled={sending}\n                onClick={async () => {\n                  let messageBody = currentUser ? idBody({ name: currentUser.fullName, email: currentUser.email }) : idBody(applier)\n                  messageBody += sessionBody()\n                  if (currentUser) messageBody += '<p><h3>Profile details</h3> (Existing user)</p>'\n                  else messageBody += profileBody(applicationProfile)\n\n                  try {\n                    setSending(true)\n                    await sendMail({ \n                      subject: `Application form (${currentUser ? currentUser.fullName : applier.name})`, \n                      body: messageBody, \n                      to: applicationReceiver\n                    })\n                    goToStep('ApplicationConfirmation')\n                    resetApplicationData(client)\n                  } catch (ex) {\n                    let errorMessage = ex.message\n                    if (ex.response) errorMessage = JSON.stringify(ex.response.data.err)\n                    \n                    setAlertOptions({ \n                      open: true, \n                      level: 'error', \n                      message: `Could not send email: ${errorMessage}` })\n                  } finally {\n                    setSending(false)\n                    try {\n                      // send an email to the applier. If an error occured, do nothing.\n                      await sendMail({ \n                        subject: `Application form received (${currentUser ? currentUser.fullName : applier.name})`, \n                        body: messageBody, \n                        to: applier.email\n                      })\n                    } catch(ex) {/* Do nothing */}\n                  }\n                }}\n              >\n                {sending ? <CircularProgress /> : 'Apply'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </Container>\n    )\n  }\n  \n  function ApplicationConfirmationStep() {\n    return (\n      <div style={{ textAlign: 'center', margin: '50px 0px', fontSize: '10pt', color: '#808080' }}>\n        <img src=\"/images/success.png\" width=\"100\" height=\"100\" />\n        <br /><br />\n        <div>\n          Your application has been received and is being processed. We will contact you shortly.\n        </div>\n      </div>\n    )\n  }\n  \n  return (\n    <div className={classes.root}>\n      <Paper style={{ padding: 5 }}>\n        <Hidden smDown>\n          <Stepper activeStep={activeStep} alternativeLabel>\n            {steps.map(s =>\n              <Step key={s.id}>\n                <StepLabel>{s.caption}</StepLabel>\n              </Step>\n            )}\n          </Stepper>\n        </Hidden>\n\n        <Hidden mdUp>\n          <div style={{ textAlign: 'center' }}>\n            {step !== 'ApplicationConfirmation' ?\n              <span>Step {activeStep + 1} / {steps.length}</span> :\n              <span>Done</span>\n            }\n          </div>\n        </Hidden>\n      </Paper>\n\n      <div style={{ minHeight: 250 }}>\n        {step === 'ConfirmAccount' && <ConfirmAccountStep />}\n\n        {step === 'FillApplicationForm' &&\n          <FillApplicationFormStep\n            onSubmit={(data: IProfileData) => {\n              goToStep('ReviewProfileData')\n\n              client.writeQuery({\n                query: GET_APPLICATION_PROFILE_QUERY,\n                data: {\n                  applicationProfile: {\n                    __typename: 'ProfileData',\n                    ...data\n                  }\n                }\n              })\n            }}\n          /> \n        }\n\n        {step === 'ReviewProfileData' && <ReviewProfileDataStep />}\n        {step === 'ReviewTrainingSession' && <ReviewTrainingSessionStep />}\n        {step === 'ApplicationConfirmation' &&  <ApplicationConfirmationStep />}\n      </div>\n\n      <div>\n        {step !== 'ApplicationConfirmation' &&\n          <div className={classes.btnBar}>\n            <div className={classes.btnLeft}>\n              <Button variant=\"contained\" color=\"default\" disabled={activeStep === 0} onClick={handleBack}>Back</Button>\n            </div>\n\n            <div className={classes.btnRight}>\n              <Button \n                variant=\"contained\" \n                color=\"default\" \n                onClick={() => { resetApplicationData(client); props.handleCancel()}}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        }\n      </div>\n\n\n      <Alert \n        level={alertOptions.level}\n        message={alertOptions.message}\n        open={alertOptions.open}\n        onClose={() => setAlertOptions({ open: false, level: alertOptions.level, message: alertOptions.message })}\n      />\n    </div>\n  )\n}\n"],"mappings":"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","sourceRoot":""}