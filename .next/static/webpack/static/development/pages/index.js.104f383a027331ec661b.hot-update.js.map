{"version":3,"file":"static/webpack/static/development/pages/index.js.104f383a027331ec661b.hot-update.js","sources":["webpack:///./lib/with-auth.jsx"],"sourcesContent":["import React from 'react'\nimport { AuthProvider } from '../components/AuthContext'\nimport jwtDecode from 'jwt-decode'\nimport { gql } from 'apollo-boost'\nimport axios from 'axios'\nimport { getCookieFromBrowser, getCookieFromServer, removeCookie } from '../lib/cookie'\nimport { authCookieName, apiBaseUrl } from '../app.config'\nimport Router from 'next/router'\n\nconst GET_ACCOUNT_QUERY = gql`\n  query getProfile($email: String!) {\n    account(email: $email) {\n      id\n      email\n      fullName\n      profile {\n        id birthDate birthPlace residence phoneNumber nationality otherDetails\n      }\n    }\n  }\n`\n\nexport default function withAuth(PageComponent) {\n\n  const getToken = req => \n    typeof window === 'undefined' ? getCookieFromServer(authCookieName, req) : getCookieFromBrowser(authCookieName)\n\n  function WithAuth({ currentUser, ...pageProps }) {\n    return (\n      <AuthProvider currentUser={currentUser}>\n        <PageComponent {...pageProps} />\n      </AuthProvider>\n    )\n  }\n\n  WithAuth.getInitialProps = async ctx => {\n    const token = getToken(ctx.req)\n    let currentUser = undefined\n    let tokenIsValid = false\n\n    if (token) {\n      try {\n        await axios.post(`${apiBaseUrl}/validateToken`, { token }, { headers: { 'Content-Type': 'application/json' } })\n        tokenIsValid = true\n      } catch (ex) {}\n\n      if (tokenIsValid) {\n        const { data: { account }} = await ctx.apolloClient.query({\n          query: GET_ACCOUNT_QUERY,\n          variables: { email: jwtDecode(token).ema },\n          context: { headers: { 'schoolman_token': token } }\n        })\n        currentUser = account\n      }\n    }\n\n    // add token and currentUser to context, so they can be used in PageComponent.getInitialProps\n    ctx.token = token\n    ctx.currentUser = currentUser\n\n    let pageProps = {}\n    if (PageComponent.getInitialProps) pageProps = await PageComponent.getInitialProps(ctx)\n\n    const { authRequired } = pageProps\n\n    if (authRequired && !currentUser) {\n      if (typeof window === 'undefined') ctx.res.redirect('/signIn')\n      else Router.push('/signIn')\n    }\n\n    if (!tokenIsValid && (typeof window !== 'undefined')) removeCookie(authCookieName)\n\n    return { currentUser, ...pageProps }\n  }\n\n  return WithAuth\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AAQA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAbA;AAAA;AAYA;AAKA;AACA;AAlBA;AAqBA;AACA;AACA;AAEA;AACA;AA1BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AA0BA;AACA;AA3BA;AAAA;AACA;AA6BA;AACA;AAEA;AACA;AACA;AAnCA;AAqCA;AArCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuCA;AACA;;;;A","sourceRoot":""}