{"version":3,"file":"static/webpack/static/development/pages/program.js.1f52c97e52c88e786726.hot-update.js","sources":["webpack:///./components/catalog/TrainingSummary.tsx","webpack:///./pages/program.tsx"],"sourcesContent":["import * as React from 'react'\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\nimport { useRouter } from 'next/router'\nimport ITrainingSummary from '../../server/src/models/catalog/TrainingSummary'\nimport { apiServer } from '../../app.config'\nimport s3 from '../../lib/s3'\n\ntype Props = { training: ITrainingSummary, displayLink: boolean, href: any }\n\nexport default function TrainingSummary({ training, displayLink, href }: Props) {\n  const classes = makeStyles((theme: Theme) => createStyles({\n    root: {\n      marginBottom: 15,\n      \n      '&:hover': {\n        opacity: 0.8,\n        cursor: 'pointer'\n      }\n    },\n    imgBox: {\n    },\n    contentBox: {\n      padding: 0,\n    },\n    title: {\n      fontSize: '12pt',\n      textDecoration: 'none',\n      fontWeight: 'bold'\n    },\n    link: {\n      textDecoration: 'none',\n      fontSize: '8pt',\n      display: 'inline-block',\n      color: '#FABD03',\n      marginTop: 5\n    }\n  }))()\n\n  const router = useRouter()\n  const banner = training.banner ? s3.getFileUrl(training.banner) : `${apiServer}/assets/images/trainings/no-banner.jpg`\n\n  return (\n    <div className={classes.root} onClick={() => href && router.push(href)}>\n      <div className={classes.imgBox}>\n        <img src={banner} alt=\"\" style={{width: '100%'}} />\n      </div>\n\n      <div className={classes.contentBox}>\n        <div className={classes.title}>\n          <Typography variant=\"body1\" color=\"primary\">{training.title}</Typography>\n        </div>\n\n        <div>\n          <Typography variant=\"caption\" style={{color: '#808080'}}>{training.description}</Typography>\n        </div>\n\n        {displayLink && training.link ? <div><a className={classes.link} href={training.link}>Official  vendor link</a></div> : null}\n      </div>\n    </div>\n  )\n}\n\nTrainingSummary.defaultProps = {\n  displayLink: false,\n  href: null\n} as Props\n","import * as React from 'react'\nimport { gql } from 'apollo-boost'\nimport Container from '../components/Container'\nimport MainLayout from '../layouts/MainLayout'\nimport Link from 'next/link'\nimport DepList from '../components/catalog/DepList'\nimport { Typography } from '@material-ui/core'\nimport {\n  Grid,\n  Hidden,\n  Paper\n} from '@material-ui/core'\nimport ProgramSummaryContent from '../components/catalog/ProgramSummaryContent'\nimport TrainingSummary from '../components/catalog/TrainingSummary'\nimport IDepartment from '../server/src/models/catalog/Department'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\n\n\nconst GET_DEPARTMENTS_QUERY = gql`\n  query getDepartments {\n    departments {\n      id \n      title\n      programs {\n        id \n        title \n        description \n        logo \n        link \n        trainings { id title description banner link }\n      }\n    }\n  }\n`\n\nfunction ProgramPage({ programId, departments }: { programId: number, departments: IDepartment[] }) {\n  const filtered = departments.flatMap(d => d.programs).filter(p => p.id == programId)\n  const program = filtered.length > 0 ? filtered[0] : null\n\n  if (!program) return <div>Program not found</div>\n\n  return (\n    <MainLayout title={`${program.title} - Program -  SchoolMan`}>\n      <Container>\n        <Grid container spacing={1}>\n          <Hidden smDown>\n            <Grid item sm={3}>\n              <DepList deps={departments} selectedProgramId={programId} />\n            </Grid>\n          </Hidden>\n          \n          <Grid item xs={12} md={9}>\n            <div style={{ marginTop: 15 }}>\n              <Paper style={{ padding: 15 }}>\n                <ProgramSummaryContent program={program} displayLink />\n              </Paper>\n\n              <Typography variant=\"h5\" color=\"primary\" style={{textAlign: 'center', margin: '15px 0px'}}>Available training courses</Typography>\n\n              <Grid container spacing={2}>\n                {program.trainings.map((t: any) =>\n                  <Grid item sm={6}>\n                    <Link href={{ pathname: '/training', query: { trainingId: t.id } }}>\n                      <a style={{ textDecoration: 'none' }}>\n                        <TrainingSummary training={t} />\n                      </a>\n                    </Link>\n                  </Grid>\n                )}\n              </Grid>\n            </div>\n          </Grid>\n        </Grid>\n      </Container>\n    </MainLayout>\n  )\n}\n\nProgramPage.getInitialProps = async ({ query, apolloClient, token }: any) => {\n  const { data: { departments }} = await apolloClient.query({\n    query: GET_DEPARTMENTS_QUERY,\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ departments, programId: query.programId, authRequired: false })\n}\n\nexport default withApollo(withAuth(ProgramPage))\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAHA;AAQA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAnBA;AAAA;AA4BA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAGA;AACA;AAggBA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAFA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;;;;A","sourceRoot":""}