{"version":3,"file":"static/webpack/static/development/pages/training.js.49dcc7aef9258b03bc75.hot-update.js","sources":["webpack:///./pages/training.tsx"],"sourcesContent":["import React from 'react'\nimport Link from 'next/link'\nimport {useRouter} from 'next/router'\nimport { gql } from 'apollo-boost'\nimport { apiServer } from '../app.config'\nimport withApollo from '../lib/with-apollo'\nimport withAuth from '../lib/with-auth'\nimport s3 from '../lib/s3'\nimport { currency } from '../lib/utilities'\n\nimport {\n  Paper,\n  Typography,\n  Grid,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Button\n} from '@material-ui/core'\nimport Container from '../components/Container'\nimport MainLayout from '../layouts/MainLayout'\nimport ITraining from '../server/src/models/catalog/Training'\nimport ITrainingUnit from '../server/src/models/catalog/TrainingUnit'\nimport ITrainingPlan from '../server/src/models/catalog/TrainingPlan'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\n\nfunction Units(props: { units: ITrainingUnit[] }) {\n  const classes = makeStyles((theme: Theme) => createStyles({\n    root: { marginTop: 20 },\n    heading: {\n      flexGrow: 1\n    },\n    secondaryHeading: {\n      fontSize: theme.typography.pxToRem(15),\n      color: theme.palette.text.secondary\n    }\n  }))()\n\n  const [currPanelId, setCurrPanelId] = React.useState<number>(-1)\n  const handleChange = (id: number) => (event: React.ChangeEvent<{}>) => {\n    if (id === currPanelId) setCurrPanelId(-1)\n    else setCurrPanelId(id)\n  }\n  \n  return (\n    <div className={classes.root}>\n      <div style={{ marginBottom: 10 }}>\n        <Typography variant=\"subtitle2\" color=\"primary\">Units</Typography>\n      </div>\n\n      {props.units.length > 0 ? \n        props.units.map(u =>\n          <ExpansionPanel expanded={currPanelId === u.id} onChange={handleChange(u.id)} key={u.id}>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls={`panel${u.id}`} id={`panel${u.id}`}>\n              <Typography className={classes.heading} variant=\"inherit\" style={{ color: '#CC9B05' }}>{u.title}</Typography>\n              <Typography className={classes.secondaryHeading}>{u.optional ? 'Optional' : 'Required'}</Typography>\n            </ExpansionPanelSummary>\n\n            <ExpansionPanelDetails>\n              <div style={{ flexGrow: 1 }}>\n                <div dangerouslySetInnerHTML={{ __html: u.syllabus }} />\n              </div>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        ) :\n        <span>No Units</span>\n      }\n    </div>\n  )\n}\n\nfunction Plan(props: { plan: ITrainingPlan }) {\n  const router = useRouter()\n\n  return (\n    <div>\n      <div style={{ paddingLeft: 15 }}>\n        <div><Typography variant=\"h5\">{props.plan.title}</Typography></div>\n        <div>\n          <Typography variant=\"caption\" style={{ color: '#808080' }}>{props.plan.description}</Typography>\n        </div>\n\n        <div style={{ marginTop: 10 }}>\n          <Table size=\"small\" style={{ border: '1px solid #DFDFDF' }}>\n            <TableBody>\n              <TableRow key=\"duration\">\n                <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Duration</TableCell>\n                <TableCell align=\"right\">{props.plan.duration}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </div>\n\n        <div style={{color: '#808080', marginTop: 15, fontSize: '11pt' }}>Fees</div>\n\n        {props.plan.fees.length > 0 ?\n          <div style={{ marginTop: 10 }}>\n            <Table size=\"small\" style={{ border: '1px solid #DFDFDF' }}>\n              <TableHead style={{ backgroundColor: '#DFDFDF' }}>\n                <TableRow>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell align=\"right\">Amount</TableCell>\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                {props.plan.fees.map(f => (\n                  <TableRow key={f.id}>\n                    <TableCell>{f.description} {f.optional && <span style={{color: '#808080'}}>(Optional)</span>}</TableCell>\n                    <TableCell>{f.feeType}</TableCell>\n                    <TableCell align=\"right\">\n                      {f.promotionalAmount > 0 ?\n                        <div>\n                          <span style={{textDecoration: 'line-through'}}>{currency(f.amount)}</span> &nbsp;\n                          <span style={{color: 'orange'}}>{currency(f.promotionalAmount)}</span>\n                        </div> :\n                        <span>{currency(f.amount)}</span>\n                      }\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div> :\n          <span>No fees</span>\n        }\n\n        <div style={{color: '#808080', marginTop: 15, fontSize: '11pt'}}>Current Sessions</div>\n\n        {props.plan.currentSessions.length > 0 ?\n          <div style={{ marginTop: 10 }}>\n            <Table size=\"small\" style={{ border: '1px solid #DFDFDF' }}>\n              <TableHead style={{ backgroundColor: '#DFDFDF' }}>\n                <TableRow>\n                  <TableCell>Title</TableCell>\n                  <TableCell  align=\"right\">Start date</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell />\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                {props.plan.currentSessions.map(s => (\n                  <TableRow key={s.id}>\n                    <TableCell>{s.title}</TableCell>\n                    <TableCell align=\"right\">{s.startDate}</TableCell>\n                    <TableCell>{s.status}</TableCell>\n                    <TableCell align=\"right\">\n                      <Link href={{ pathname: '/application', query: { tsId: s.id } }}>\n                        <a>Apply</a>\n                      </Link>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div> :\n          <span>There is no new session right now, we should schedule one shortly, please check again later</span>\n        }\n      </div>\n    </div>\n  )\n}\n\nfunction Plans(props: { plans: ITrainingPlan[] }) {\n  const classes = makeStyles((theme: Theme) => createStyles({\n    root: { marginTop: 20 },\n    planItem: {\n      fontSize: '11pt',\n      color: '#808080',\n      cursor: 'pointer',\n      padding: 5,\n      borderRadius: 3\n    },\n    selectedPlanItem: {backgroundColor: '#FABD03', color: '#000000'}\n  }))()\n\n  const [currentPlanId, setCurrentPlanId] = React.useState<number>(props.plans.length > 0 ? 0 : -1)\n  const handleClick = (id: number) => (event: React.ChangeEvent<{}>) =>\n    setCurrentPlanId(id)\n\n  return (\n    <div className={classes.root}>\n      <div style={{ marginBottom: 10 }}>\n        <Typography variant=\"subtitle2\" color=\"primary\">Plans</Typography>\n      </div>\n      \n      <Paper style={{ padding: 15 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={4}>\n            {props.plans.map((p, i) => (\n              <div\n                key={p.id}\n                className={`${classes.planItem} ${i === currentPlanId ? classes.selectedPlanItem : ''}`}\n                onClick={handleClick(i)}\n                style={{position: 'relative', paddingRight: 22}}\n              >\n                {p.title}\n                \n                {p.currentSessions.length > 0  && (\n                  <span style={{fontSize: '8pt', width: 16, height: 16, textAlign: 'center', borderRadius: '50%', backgroundColor: '#444444', color: 'white', position: 'absolute', right: 5, top: 7, display: 'inline-block'}}>\n                    {p.currentSessions.length}\n                  </span>\n                )}\n              </div>\n            ))}\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            {(currentPlanId !== -1) ? \n              <Plan plan={props.plans[currentPlanId]} /> : \n              <span>No plan selected</span>\n            }\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  )\n}\n\nconst GET_ONE_TRAINING_QUERY = gql`\n  query getTrainingById($trainingId: ID!) {\n    training(trainingId: $trainingId) {\n      id\n      title\n      description\n      banner\n      link\n      requiredOptionalUnits\n      prerequisites\n      qualifications\n      units { id title syllabus optional }\n      plans {\n        id\n        title\n        description\n        duration\n        fees { id description feeType amount promotionalAmount optional }\n        currentSessions {\n          id\n          title\n          startDate\n          status\n          fees { id description feeType amount promotionalAmount optional }\n        }\n      }\n      program {id title logo }\n    }\n  }\n`\n\nfunction TrainingPage(props: { training: ITraining }) {\n\n  const t: ITraining = props.training\n  const banner = t.banner ? s3.getFileUrl(t.banner) : `${apiServer}/assets/images/trainings/no-banner.jpg`\n\n  return (\n    <MainLayout title={`${props.training.title} - Training -  IMIT`}>\n      <Container>\n        <img src={banner} alt=\"\" style={{width: '100%', marginTop: 0}} />\n\n        <Paper style={{ padding: 15, marginTop: 5 }}>\n          <div><Typography variant=\"h5\">{t.title}</Typography></div>\n          <div>\n            <Typography variant=\"caption\" style={{ color: '#808080' }}>{t.description}</Typography>\n          </div>\n\n          <div>\n            {t.link ? \n              <div>\n                <a href={t.link} style={{textDecoration: 'none', fontSize: '8pt', color: '#339967'}}>\n                  Official  vendor link\n                </a>\n              </div> : \n              null\n            }\n          </div>\n\n          <div style={{ marginTop: 15 }}>\n            <Table size=\"small\" style={{ border: '1px solid #DFDFDF' }}>\n              <TableBody>\n                <TableRow key={t.prerequisites}>\n                  <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Program</TableCell>\n                  <TableCell align=\"right\">\n                    <Link href={{ pathname: \"/program\", query: {programId: t.program.id} }}><a>{t.program.title}</a></Link>\n                  </TableCell>\n                </TableRow>\n\n                {t.prerequisites && (\n                  <TableRow key={t.prerequisites}>\n                    <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Prerequisites</TableCell>\n                    <TableCell align=\"right\">{t.prerequisites}</TableCell>\n                  </TableRow>\n                )}\n\n                {t.qualifications && (\n                  <TableRow key={t.qualifications}>\n                    <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Qualifications</TableCell>\n                    <TableCell align=\"right\">{t.qualifications}</TableCell>\n                  </TableRow>\n                )}\n\n                <TableRow key=\"reqNum\">\n                  <TableCell component=\"th\" scope=\"row\" style={{ color: '#808080' }}>Required number of optional units</TableCell>\n                  <TableCell align=\"right\">{t.requiredOptionalUnits || 0}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </div>\n        </Paper>\n\n        <Plans plans={t.plans} />\n        <Units units={t.units} />\n      </Container>\n    </MainLayout>\n  )\n}\n\nTrainingPage.getInitialProps = async ({ query, apolloClient, token }: any) => {\n  const { data: { training }} = await apolloClient.query({\n    query: GET_ONE_TRAINING_QUERY,\n    variables: { trainingId: parseInt(query.trainingId, 10) },\n    context: { headers: { 'schoolman_token': token } }\n  })\n\n  return ({ training, authRequired: false })\n}\n\nexport default withApollo(withAuth(TrainingPage))\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AALA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAYA;AAAA;AACA;AAEA;AAHA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAckeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AATA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAksourceRoot":""}